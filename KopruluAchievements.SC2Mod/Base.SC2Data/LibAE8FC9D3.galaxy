include "TriggerLibs/NativeLib"

include "LibAE8FC9D3_h"

//--------------------------------------------------------------------------------------------------
// Library: Koprulu Achievements
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAE8FC9D3_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libAE8FC9D3_InitVariables_completed = false;

void libAE8FC9D3_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libAE8FC9D3_InitVariables_completed) {
        return;
    }

    libAE8FC9D3_InitVariables_completed = true;

    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxAvailableLists; init_i += 1) {
        libAE8FC9D3_gv_kL_AchievementIndexing[init_i] = 20;
    }
    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxPlayers; init_i += 1) {
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_fanfareContainer = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_achievementFrames[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_title[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_description[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_pointsLabel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_icon[init_i1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxPlayers; init_i += 1) {
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_gameMenuButton = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_userProfilePanel = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_userProfilePoints = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_closeButton = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentAchievementItem[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemTitle[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemDescription[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemPoints[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemDate[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 3; init_j1 += 1) {
                libAE8FC9D3_gv_kL_UserProfile[init_i].lv_statsGlobalValues[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 3; init_j1 += 1) {
                libAE8FC9D3_gv_kL_UserProfile[init_i].lv_specificStatValues[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_lastPlayedLabel = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_lastPlayedCharImage = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_lastPlayedBgImage = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_campaignCompletion[init_i1] = c_invalidDialogControlId;
        }
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_campaignProgressBar = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_campaignProgressLabel = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libAE8FC9D3_gv_kL_MaxAvailableLists; init_j += 1) {
            libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_listboxFilter = c_invalidDialogControlId;
            libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_listboxCategoryPanel = c_invalidDialogControlId;
            libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_listboxCategoryProgress = c_invalidDialogControlId;
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_achievementItems[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_title[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_description[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_icon[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_pointsLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_completionLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_expandedFrame[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesPanel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesFrames[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyIcon[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyTitle[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyDescription[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyPoints[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyDate[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCount[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCountLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCountExtended[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCountExtendedLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardFrames[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardIcons[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardTypeLabel[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_progressFrame[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_progressBar[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_progressNextAchievement[init_i1] = c_invalidDialogControlId;
            }
        }
    }
}

// Presets
// Functions
void libAE8FC9D3_gf_ShowUserProfile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_ToggleProfileDisplay(true, lp_player);
}

void libAE8FC9D3_gf_InitializeAchievements () {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_InitAchi();
}

void libAE8FC9D3_gf_UpdateAchievementProgress (string lp_achievement, int lp_valueIncrease, int lp_player, bool lp_saveToBank) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_UpdateAchiProgress(lp_achievement, lp_valueIncrease, lp_player, lp_saveToBank);
}

void libAE8FC9D3_gf_AwardAchievement (string lp_achievement, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((AchievementsDisabled(1) == true)) {
        return ;
    }

    libAE8FC9D3_gf_KL_AwardAchi(lp_achievement, lp_player);
}

void libAE8FC9D3_gf_SetSummaryStatValue (int lp_newValue, int lp_category, int lp_valueLabel, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_SetStatPanelValue(lp_newValue, lp_category, lp_valueLabel, lp_player);
}

void libAE8FC9D3_gf_SetSummaryLastPlayed (string lp_text, string lp_image, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_SetLastPlayedValue(lp_text, lp_image, lp_player);
}

void libAE8FC9D3_gf_SetSummaryLastPlayedBackground (string lp_image, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_SetLastPlayedBackground(lp_image, 1);
}

void libAE8FC9D3_gf_SetCampaignCompletionLevel (int lp_slot, int lp_difficulty, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_SetCampaignCompletion(lp_slot, lp_difficulty, lp_player);
}

void libAE8FC9D3_gf_SendCampaignCompletionLevelMessage (string lp_message, int lp_slot, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_SendCampaignCompletionMessage(lp_message, lp_slot, lp_player);
}

void libAE8FC9D3_gf_SetAchievementCompletionValue (fixed lp_value, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_SetAchievementCompletion(lp_value, lp_player);
}

bool libAE8FC9D3_gf_PlayerHasAchievement (int lp_player, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    return libAE8FC9D3_gf_KL_PlayerAchievementState(lp_player, lp_achievement);
}

bank libAE8FC9D3_gf_ReturnPlayerBank (int lp_player) {
    // Variable Declarations
    bool lv_achievementState;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return libAE8FC9D3_gf_KL_ReturnPlayerBank(lp_player);
}

int libAE8FC9D3_gf_ReturnAchievementCategoryMaxPoints (int lp_player, int lp_categoryIndex) {
    // Variable Declarations
    int lv_index;
    int lv_maxPointsLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_maxPointsLocal += libAE8FC9D3_gv_kL_MaxPoints[lp_player][lp_categoryIndex];
    return lv_maxPointsLocal;
}

int libAE8FC9D3_gf_ReturnAchievementCategoryEarnedPoints (int lp_player, int lp_categoryIndex) {
    // Variable Declarations
    int lv_index;
    int lv_currentPointsLocal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentPointsLocal += libAE8FC9D3_gv_kL_CurrentPoints[lp_player][lp_categoryIndex];
    return lv_currentPointsLocal;
}

int libAE8FC9D3_gf_ReturnAchievementTotalMaxPoints (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_maxPointsLocal;

    // Automatic Variable Declarations
    const int auto3CE0EBA2_ae = libAE8FC9D3_gv_kL_MaxAvailableLists;
    const int auto3CE0EBA2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto3CE0EBA2_ai >= 0 && lv_index <= auto3CE0EBA2_ae) || (auto3CE0EBA2_ai < 0 && lv_index >= auto3CE0EBA2_ae) ) ; lv_index += auto3CE0EBA2_ai ) {
        lv_maxPointsLocal += libAE8FC9D3_gv_kL_MaxPoints[lp_player][lv_index];
    }
    return lv_maxPointsLocal;
}

int libAE8FC9D3_gf_ReturnAchievementTotalEarnedPoints (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_currentPointsLocal;

    // Automatic Variable Declarations
    const int autoA6793557_ae = libAE8FC9D3_gv_kL_MaxAvailableLists;
    const int autoA6793557_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoA6793557_ai >= 0 && lv_index <= autoA6793557_ae) || (autoA6793557_ai < 0 && lv_index >= autoA6793557_ae) ) ; lv_index += autoA6793557_ai ) {
        lv_currentPointsLocal += libAE8FC9D3_gv_kL_CurrentPoints[lp_player][lv_index];
    }
    return lv_currentPointsLocal;
}

int libAE8FC9D3_gf_ReturnAchievementTotalCount () {
    // Variable Declarations
    int lv_index;
    int lv_maxAchievementsLocal;

    // Automatic Variable Declarations
    int auto631649B9_ae;
    const int auto631649B9_ai = 1;

    // Variable Initialization

    // Implementation
    auto631649B9_ae = UserDataInstanceCount("Achievements");
    lv_index = 1;
    for ( ; ( (auto631649B9_ai >= 0 && lv_index <= auto631649B9_ae) || (auto631649B9_ai < 0 && lv_index >= auto631649B9_ae) ) ; lv_index += auto631649B9_ai ) {
        if ((UserDataInstance("Achievements", lv_index) != null)) {
            lv_maxAchievementsLocal += 1;
        }

    }
    return lv_maxAchievementsLocal;
}

int libAE8FC9D3_gf_ReturnAchievementTotalEarned (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_achievementsCompletedLocal;

    // Automatic Variable Declarations
    int auto4F9669D0_ae;
    const int auto4F9669D0_ai = 1;

    // Variable Initialization

    // Implementation
    auto4F9669D0_ae = UserDataInstanceCount("Achievements");
    lv_index = 1;
    for ( ; ( (auto4F9669D0_ai >= 0 && lv_index <= auto4F9669D0_ae) || (auto4F9669D0_ai < 0 && lv_index >= auto4F9669D0_ae) ) ; lv_index += auto4F9669D0_ai ) {
        if ((UserDataInstance("Achievements", lv_index) != null) && (libAE8FC9D3_gf_KL_PlayerAchievementState(lp_player, UserDataInstance("Achievements", lv_index)) == true)) {
            lv_achievementsCompletedLocal += 1;
        }

    }
    return lv_achievementsCompletedLocal;
}

int libAE8FC9D3_gf_ReturnAchievementProgressMax (string lp_achievement) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_achievement == null)) {
        return 0;
    }

    lv_int = UserDataGetInt("Achievements", lp_achievement, "Required Count", 1);
    return lv_int;
}

int libAE8FC9D3_gf_ReturnAchievementProgress (int lp_player, string lp_achievement) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_achievement == null)) {
        return 0;
    }

    lv_int = UserDataGetInt("Achievements", lp_achievement, "Current Count", 1);
    return lv_int;
}

void libAE8FC9D3_gf_KL_InitAchi () {
    // Variable Declarations
    int lv_activePlayers;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto79AB33C1_g;
    int auto79AB33C1_var;

    // Variable Initialization

    // Implementation
    auto79AB33C1_g = PlayerGroupActive();
    auto79AB33C1_var = -1;
    while (true) {
        auto79AB33C1_var = PlayerGroupNextPlayer(auto79AB33C1_g, auto79AB33C1_var);
        if (auto79AB33C1_var < 0) { break; }
        lv_activePlayers += 1;
        if ((lv_activePlayers > libAE8FC9D3_gv_kL_MaxPlayers)) {
            return ;
        }

        if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lv_activePlayers] == true)) {
            return ;
        }

        if ((GameAttributePlayerValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]500", lv_activePlayers) == "Comp")) {
        }
        else {
            libAE8FC9D3_gv_kL_AchievementsInitialized[lv_activePlayers] = true;
            UISetGameMenuItemVisible(PlayerGroupSingle(lv_activePlayers), c_gameMenuDialogAchievementsButton, false);
            UISetGameMenuItemVisible(PlayerGroupSingle(lv_activePlayers), c_gameMenuDialogMessageLogButton, false);
            libAE8FC9D3_gf_KL_BankLoad(lv_activePlayers);
            libAE8FC9D3_gf_KL_HookupFanfarePanels(lv_activePlayers);
            libAE8FC9D3_gf_KL_CreateUserProfilePanel(lv_activePlayers);
            libAE8FC9D3_gf_KL_UpdateUserProfile(lv_activePlayers);
        }
    }
}

void libAE8FC9D3_gf_KL_BankPreload (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoBD033E34_val;

    // Variable Initialization

    // Implementation
    autoBD033E34_val = lp_player;
    if (autoBD033E34_val == 1) {
    }
    else {
    }
}

void libAE8FC9D3_gf_KL_BankLoad (int lp_Player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto79C994B7_ae;
    const int auto79C994B7_ai = 1;

    // Variable Initialization

    // Implementation
    libAE8FC9D3_gf_KL_BankPreload(lp_Player);
    if ((lp_Player == 1)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 1);
        libAE8FC9D3_gv_KL_SharedBankP1 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP1, c_bankOptionSignature, true);
    }

    if ((lp_Player == 2)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 2);
        libAE8FC9D3_gv_KL_SharedBankP2 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP2, c_bankOptionSignature, true);
    }

    if ((lp_Player == 3)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 3);
        libAE8FC9D3_gv_KL_SharedBankP3 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP3, c_bankOptionSignature, true);
    }

    if ((lp_Player == 4)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 4);
        libAE8FC9D3_gv_KL_SharedBankP4 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP4, c_bankOptionSignature, true);
    }

    if ((lp_Player == 5)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 5);
        libAE8FC9D3_gv_KL_SharedBankP5 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP5, c_bankOptionSignature, true);
    }

    if ((lp_Player == 6)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 6);
        libAE8FC9D3_gv_KL_SharedBankP6 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP6, c_bankOptionSignature, true);
    }

    if ((lp_Player == 7)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 7);
        libAE8FC9D3_gv_KL_SharedBankP7 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP7, c_bankOptionSignature, true);
    }

    if ((lp_Player == 8)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 8);
        libAE8FC9D3_gv_KL_SharedBankP8 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP8, c_bankOptionSignature, true);
    }

    if ((lp_Player == 9)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 9);
        libAE8FC9D3_gv_KL_SharedBankP9 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP9, c_bankOptionSignature, true);
    }

    if ((lp_Player == 10)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 10);
        libAE8FC9D3_gv_KL_SharedBankP10 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP10, c_bankOptionSignature, true);
    }

    if ((lp_Player == 11)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 11);
        libAE8FC9D3_gv_KL_SharedBankP11 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP11, c_bankOptionSignature, true);
    }

    if ((lp_Player == 12)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementNameConstant, 12);
        libAE8FC9D3_gv_KL_SharedBankP12 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP12, c_bankOptionSignature, true);
    }

    BankWait(BankLastCreated());
    BankSave(libAE8FC9D3_gf_ReturnPlayerBank(lp_Player));
    auto79C994B7_ae = UserDataInstanceCount("Achievements");
    lv_index = 1;
    for ( ; ( (auto79C994B7_ai >= 0 && lv_index <= auto79C994B7_ae) || (auto79C994B7_ai < 0 && lv_index >= auto79C994B7_ae) ) ; lv_index += auto79C994B7_ai ) {
        if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_Player, UserDataInstance("Achievements", lv_index)) == true)) {
            UserDataSetString("Achievements", UserDataInstance("Achievements", lv_index), "AwardState", 1, "Awarded");
        }
        else {
            UserDataSetString("Achievements", UserDataInstance("Achievements", lv_index), "AwardState", 1, "Not Awarded");
        }
    }
}

void libAE8FC9D3_gf_KL_BankSave (int lp_player, bool lp_update) {
    // Variable Declarations
    bank lv_localBank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localBank = libAE8FC9D3_gf_ReturnPlayerBank(lp_player);
    if ((BankVerify(lv_localBank) != true)) {
        return ;
    }

    BankSave(lv_localBank);
    if ((lp_update == true)) {
        libAE8FC9D3_gf_KL_UpdateUserProfile(1);
    }

}

void libAE8FC9D3_gf_KL_ToggleProfileDisplay (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    libAE8FC9D3_gf_KL_UpdateUserProfile(lp_player);
    UIMessageLogPanelSetVisible(PlayerGroupSingle(lp_player), lp_showHide);
}

bool libAE8FC9D3_gf_KL_ReturnRecentAchievement (int lp_player, int lp_slot, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankValueGetAsFlag(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "State")) == true)) {
        return true;
    }
    else {
        return false;
    }
}

string libAE8FC9D3_gf_KL_ReturnAchievementFromID (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_index;
    string lv_iD;
    string lv_instance;

    // Automatic Variable Declarations
    int auto212BB87B_ae;
    const int auto212BB87B_ai = 1;

    // Variable Initialization
    lv_iD = "";

    // Implementation
    lv_iD = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lp_slot)));
    auto212BB87B_ae = UserDataInstanceCount("Achievements");
    lv_index = 1;
    for ( ; ( (auto212BB87B_ai >= 0 && lv_index <= auto212BB87B_ae) || (auto212BB87B_ai < 0 && lv_index >= auto212BB87B_ae) ) ; lv_index += auto212BB87B_ai ) {
        if ((lv_iD != UserDataGetString("Achievements", UserDataInstance("Achievements", lv_index), "ID", 1))) {
        }
        else {
            lv_instance = UserDataInstance("Achievements", lv_index);
            break;
        }
    }
    return lv_instance;
}

string libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex (int lp_index, string lp_achievement) {
    // Variable Declarations
    string lv_user;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_achievement == null)) {
        return null;
    }

    lv_user = UserDataGetUserInstance("Achievements", lp_achievement, "Series", (lp_index + 1));
    if ((lv_user != null)) {
        return lv_user;
    }
    else {
        return null;
    }
}

int libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize (string lp_achievement) {
    // Variable Declarations
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    const int auto91C232AA_ae = 10;
    const int auto91C232AA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_achievement == null)) {
        return 0;
    }

    lv_i = 1;
    for ( ; ( (auto91C232AA_ai >= 0 && lv_i <= auto91C232AA_ae) || (auto91C232AA_ai < 0 && lv_i >= auto91C232AA_ae) ) ; lv_i += auto91C232AA_ai ) {
        if ((UserDataGetUserInstance("Achievements", lp_achievement, "Series", lv_i) != null)) {
            lv_count += 1;
        }

    }
    lv_count -= 1;
    return lv_count;
}

bool libAE8FC9D3_gf_KL_IsAchievementSeriesPart (string lp_achievement) {
    // Variable Declarations
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_achievement == null)) {
        return false;
    }

    if ((UserDataGetString("Achievements", lp_achievement, "IsPartofSeries", 1) == "True")) {
        return true;
    }
    else {
        return false;
    }
}

int libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Achievements", UserDataInstance("Achievements", lp_index), "Category", 1);
}

string libAE8FC9D3_gf_KL_ReturnDummyFramePath (int lp_type) {
    // Automatic Variable Declarations
    int auto0E598729_val;

    // Implementation
    auto0E598729_val = lp_type;
    if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Icon) {
        return "DummyInfoFrame/AchievementIcon";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Description) {
        return "DummyInfoFrame/AchievementDescription";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Title) {
        return "DummyInfoFrame/AchievementTitle";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Date) {
        return "DummyInfoFrame/CompletionDate";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Points) {
        return "DummyInfoFrame/AchievementPoints";
    }
    else {
        return "";
    }
}

void libAE8FC9D3_gf_KL_UpdateUserProfile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    libAE8FC9D3_gf_KL_UpdateRecentAchievements(lp_player);
    libAE8FC9D3_gf_KL_UpdateAchievementItemData(lp_player);
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePoints, IntToText(libAE8FC9D3_gf_ReturnAchievementTotalEarnedPoints(lp_player)), PlayerGroupSingle(lp_player));
}

void libAE8FC9D3_gf_KL_UpdateAchievementItemData (int lp_player) {
    // Variable Declarations
    int lv_userI;
    int lv_listbox;
    string lv_achievementInstance;
    string lv_dateValue;
    string lv_seriesDateValue;
    int lv_contentCount;
    int lv_lastUnearnedSeries;
    int lv_earnedSeriesCount;
    int lv_seriesDisplayIndex;
    int lv_seriesItemPoints;

    // Automatic Variable Declarations
    int auto011A08E4_ae;
    const int auto011A08E4_ai = 1;
    const int auto28A27081_ae = libAE8FC9D3_gv_kL_MaxAvailableLists;
    const int auto28A27081_ai = 1;
    int auto6B6FE193_ae;
    const int auto6B6FE193_ai = 1;
    int autoC542F88F_ae;
    int autoC542F88F_var;
    int auto787B141D_ae;
    int auto787B141D_var;
    int auto68D7BD51_ae;
    int auto68D7BD51_var;
    int autoB8B9E3AE_ae;
    int autoB8B9E3AE_var;
    int auto562874E4_ae;
    int auto562874E4_var;

    // Variable Initialization
    lv_dateValue = "";
    lv_seriesDateValue = "";

    // Implementation
    auto011A08E4_ae = UserDataInstanceCount("Achievements");
    lv_userI = 1;
    for ( ; ( (auto011A08E4_ai >= 0 && lv_userI <= auto011A08E4_ae) || (auto011A08E4_ai < 0 && lv_userI >= auto011A08E4_ae) ) ; lv_userI += auto011A08E4_ai ) {
        lv_listbox = libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI);
        libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressCurrent = 0;
        libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressMax = 0;
        libAE8FC9D3_gv_kL_CurrentPoints[lp_player][lv_listbox] = 0;
        libAE8FC9D3_gv_kL_MaxPoints[lp_player][lv_listbox] = 0;
        libAE8FC9D3_gv_kL_CurrentCount[lp_player][lv_listbox] = 0;
        libAE8FC9D3_gv_kL_MaxCount[lp_player][lv_listbox] = 0;
    }
    lv_userI = 1;
    for ( ; ( (auto28A27081_ai >= 0 && lv_userI <= auto28A27081_ae) || (auto28A27081_ai < 0 && lv_userI >= auto28A27081_ae) ) ; lv_userI += auto28A27081_ai ) {
        libAE8FC9D3_gv_kL_AchievementIndexing[lv_userI] = 0;
    }
    auto6B6FE193_ae = UserDataInstanceCount("Achievements");
    lv_userI = 1;
    for ( ; ( (auto6B6FE193_ai >= 0 && lv_userI <= auto6B6FE193_ae) || (auto6B6FE193_ai < 0 && lv_userI >= auto6B6FE193_ae) ) ; lv_userI += auto6B6FE193_ai ) {
        lv_achievementInstance = UserDataInstance("Achievements", lv_userI);
        if ((libAE8FC9D3_gf_KL_IsAchievementSeriesPart(lv_achievementInstance) == true)) {
        }
        else {
            lv_contentCount = 0;
            lv_lastUnearnedSeries = 0;
            lv_earnedSeriesCount = 0;
            lv_seriesItemPoints = 0;
            lv_listbox = libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI);
            libAE8FC9D3_gv_kL_AchievementIndexing[lv_listbox] += 1;
            libAE8FC9D3_gf_KL_HoDItemInListbox(lp_player, lv_listbox, libAE8FC9D3_gv_kL_AchievementIndexing[lv_listbox]);
            DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), true);
            libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_icon[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], UserDataGetImagePath("Achievements", lv_achievementInstance, "Icon", 1), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_title[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], UserDataGetText("Achievements", lv_achievementInstance, "Title", 1), PlayerGroupSingle(lp_player));
            if ((UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1) > 0)) {
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_pointsLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToText(UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1)), PlayerGroupSingle(lp_player));
                libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressMax += UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1);
                libAE8FC9D3_gv_kL_MaxPoints[lp_player][lv_listbox] += UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1);
                libAE8FC9D3_gv_kL_MaxCount[lp_player][lv_listbox] += 1;
                libNtve_gf_SetDialogItemMaximumValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgress, libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressMax, PlayerGroupSingle(lp_player));
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "NotEarned");
            }
            else {
                DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_pointsLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), false);
                if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_achievementInstance) == true)) {
                }
                else {
                    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), false);
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "Empty");
                }
            }
            if ((libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance) > 0)) {
                autoC542F88F_ae = libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance);
                autoC542F88F_var = 1;
                for ( ; autoC542F88F_var <= autoC542F88F_ae; autoC542F88F_var += 1 ) {
                    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressMax += UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoC542F88F_var, lv_achievementInstance), "Points", 1);
                    libAE8FC9D3_gv_kL_MaxPoints[lp_player][lv_listbox] += UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoC542F88F_var, lv_achievementInstance), "Points", 1);
                    libNtve_gf_SetDialogItemMaximumValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgress, libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressMax, PlayerGroupSingle(lp_player));
                }
            }

            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_description[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], UserDataGetText("Achievements", lv_achievementInstance, "Description", 1), PlayerGroupSingle(lp_player));
            lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_achievementInstance, "ID", 1) + "Date"));
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_completionLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
            if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_achievementInstance) == true)) {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
                libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressCurrent += UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1);
                libAE8FC9D3_gv_kL_CurrentPoints[lp_player][lv_listbox] += UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1);
                libAE8FC9D3_gv_kL_CurrentCount[lp_player][lv_listbox] += 1;
                if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressCurrent > 0)) {
                    libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgress, libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressCurrent, PlayerGroupSingle(lp_player));
                }

            }

            if ((libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance) > 0)) {
                auto787B141D_ae = libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance);
                auto787B141D_var = 1;
                for ( ; auto787B141D_var <= auto787B141D_ae; auto787B141D_var += 1 ) {
                    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(auto787B141D_var, lv_achievementInstance)) == true)) {
                        libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressCurrent += UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(auto787B141D_var, lv_achievementInstance), "Points", 1);
                        libAE8FC9D3_gv_kL_CurrentPoints[lp_player][lv_listbox] += UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(auto787B141D_var, lv_achievementInstance), "Points", 1);
                        libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgress, libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_listboxCategoryProgressCurrent, PlayerGroupSingle(lp_player));
                    }

                }
            }

            if ((libAE8FC9D3_gf_ReturnAchievementProgressMax(lv_achievementInstance) > 0)) {
                lv_contentCount += 1;
                libAE8FC9D3_gf_KL_HoDProgressPanel(lp_player, lv_listbox, libAE8FC9D3_gv_kL_AchievementIndexing[lv_listbox]);
                if ((libAE8FC9D3_gf_KL_ReturnAchievementProgressUser(lp_player, lv_achievementInstance) > 0)) {
                }
                else {
                    auto68D7BD51_ae = libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance);
                    auto68D7BD51_var = 0;
                    for ( ; auto68D7BD51_var <= auto68D7BD51_ae; auto68D7BD51_var += 1 ) {
                        UserDataSetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(auto68D7BD51_var, lv_achievementInstance), "Current Count", 1, libAE8FC9D3_gf_KL_ReturnAchievementProgressBank(lp_player, libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(auto68D7BD51_var, lv_achievementInstance)));
                    }
                }
                if ((libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance) > 0)) {
                }
                else {
                    libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToFixed(libAE8FC9D3_gf_KL_ReturnAchievementProgressUser(lp_player, lv_achievementInstance)), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemMaximumValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToFixed(libAE8FC9D3_gf_ReturnAchievementProgressMax(lv_achievementInstance)), PlayerGroupSingle(lp_player));
                }
                if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_achievementInstance) == true)) {
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "ProgressState", "Complete");
                }
                else {
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "ProgressState", "Current");
                }
            }

            if ((libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance) > 0)) {
                lv_contentCount += 1;
                autoB8B9E3AE_ae = libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance);
                autoB8B9E3AE_var = 0;
                for ( ; autoB8B9E3AE_var <= autoB8B9E3AE_ae; autoB8B9E3AE_var += 1 ) {
                    libAE8FC9D3_gf_KL_HoDSeriesPanels(lp_player, libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI), libAE8FC9D3_gv_kL_AchievementIndexing[lv_listbox], autoB8B9E3AE_var);
                    lv_seriesDateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "ID", 1) + "Date"));
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesDummyDate[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], StringToText(lv_seriesDateValue), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesDummyDescription[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], UserDataGetText("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Description", 1), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesDummyIcon[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], UserDataGetImagePath("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Icon", 1), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesDummyTitle[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], UserDataGetText("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Title", 1), PlayerGroupSingle(lp_player));
                    if ((UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Points", 1) > 0)) {
                        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesDummyPoints[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], IntToText(UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Points", 1)), PlayerGroupSingle(lp_player));
                    }
                    else {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesFrames[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], PlayerGroupSingle(lp_player), "PointsState", "NoPoints");
                    }
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesFrames[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], PlayerGroupSingle(lp_player), "RewardState", "NoReward");
                    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance)) == true)) {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesFrames[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], PlayerGroupSingle(lp_player), "SeriesEntryState", "Earned");
                        lv_seriesItemPoints += UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Points", 1);
                        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_pointsLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToText(lv_seriesItemPoints), PlayerGroupSingle(lp_player));
                    }
                    else {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_seriesFrames[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]][autoB8B9E3AE_var], PlayerGroupSingle(lp_player), "SeriesEntryState", "Unearned");
                        if ((autoB8B9E3AE_var == 0) && (UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Points", 1) > 0)) {
                            lv_seriesItemPoints += UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Points", 1);
                            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_pointsLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToText(UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(autoB8B9E3AE_var, lv_achievementInstance), "Points", 1)), PlayerGroupSingle(lp_player));
                        }

                    }
                }
                auto562874E4_ae = libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance);
                auto562874E4_var = 0;
                for ( ; auto562874E4_var <= auto562874E4_ae; auto562874E4_var += 1 ) {
                    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(auto562874E4_var, lv_achievementInstance)) == false)) {
                        lv_lastUnearnedSeries = auto562874E4_var;
                        break;
                    }
                    else {
                        lv_earnedSeriesCount += 1;
                    }
                }
                if ((lv_earnedSeriesCount > 0) && (lv_lastUnearnedSeries == 0)) {
                    lv_seriesDisplayIndex = libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lv_achievementInstance);
                    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesDisplayIndex, lv_achievementInstance)) == true)) {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "SeriesState", "SeriesFinished");
                        if ((libAE8FC9D3_gf_ReturnAchievementProgressMax(lv_achievementInstance) > 0)) {
                            DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "ProgressState", "Complete");
                            DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressNextAchievement[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), false);
                        }

                    }
                    else {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "NotEarned");
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "SeriesState", "Series");
                        if ((libAE8FC9D3_gf_ReturnAchievementProgressMax(lv_achievementInstance) > 0)) {
                            DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "ProgressState", "Current");
                            DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressNextAchievement[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), true);
                        }

                    }
                }
                else {
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "NotEarned");
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "SeriesState", "Series");
                    lv_seriesDisplayIndex = lv_lastUnearnedSeries;
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_completionLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], StringToText(""), PlayerGroupSingle(lp_player));
                    if ((libAE8FC9D3_gf_ReturnAchievementProgressMax(lv_achievementInstance) > 0)) {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "ProgressState", "Current");
                        DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_progressNextAchievement[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), true);
                    }

                }
                libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_icon[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], UserDataGetImagePath("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesDisplayIndex, lv_achievementInstance), "Icon", 1), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_title[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], UserDataGetText("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesDisplayIndex, lv_achievementInstance), "Title", 1), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_description[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], UserDataGetText("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesDisplayIndex, lv_achievementInstance), "Description", 1), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_pointsLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToText(lv_seriesItemPoints), PlayerGroupSingle(lp_player));
                if ((libAE8FC9D3_gf_KL_ReturnAchievementProgressUser(lp_player, lv_achievementInstance) > 0)) {
                    libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToFixed(UserDataGetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesDisplayIndex, lv_achievementInstance), "Current Count", 1)), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemMaximumValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_progressBar[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToFixed(libAE8FC9D3_gf_ReturnAchievementProgressMax(libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesDisplayIndex, lv_achievementInstance))), PlayerGroupSingle(lp_player));
                }

            }

            if ((lv_contentCount > 0)) {
            }
            else {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_listbox].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "DisplayContentState", "NoContent");
            }
        }
    }
}

void libAE8FC9D3_gf_KL_UpdateRecentAchievements (int lp_player) {
    // Variable Declarations
    int lv_index;
    string lv_achievementInstance;

    // Automatic Variable Declarations
    const int autoAFD48B85_ae = 7;
    const int autoAFD48B85_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (autoAFD48B85_ai >= 0 && lv_index <= autoAFD48B85_ae) || (autoAFD48B85_ai < 0 && lv_index >= autoAFD48B85_ae) ) ; lv_index += autoAFD48B85_ai ) {
        if ((BankKeyExists(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index))) == false)) {
            return ;
        }

        lv_achievementInstance = libAE8FC9D3_gf_KL_ReturnAchievementFromID(lp_player, lv_index);
        DialogControlSetVisible(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemIcon[lv_index], UserDataGetImagePath("Achievements", lv_achievementInstance, "Icon", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemTitle[lv_index], UserDataGetText("Achievements", lv_achievementInstance, "Title", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDescription[lv_index], UserDataGetText("Achievements", lv_achievementInstance, "Description", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDate[lv_index], StringToText(BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_achievementInstance, "ID", 1) + "Date"))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemPoints[lv_index], IntToText(UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1)), PlayerGroupSingle(lp_player));
    }
}

void libAE8FC9D3_gf_KL_SetStatPanelValue (int lp_newValue, int lp_category, int lp_valueLabel, int lp_player) {
    // Automatic Variable Declarations
    int auto47219701_val;

    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    auto47219701_val = lp_valueLabel;
    if (auto47219701_val == 1) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_statsGlobalValues[lp_category][1], IntToText(lp_newValue), PlayerGroupSingle(lp_player));
    }
    else if (auto47219701_val == 2) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_statsGlobalValues[lp_category][2], IntToText(lp_newValue), PlayerGroupSingle(lp_player));
    }
    else if (auto47219701_val == 3) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_statsGlobalValues[lp_category][3], IntToText(lp_newValue), PlayerGroupSingle(lp_player));
    }
    else if (auto47219701_val == 4) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_specificStatValues[lp_category][1], IntToText(lp_newValue), PlayerGroupSingle(lp_player));
    }
    else if (auto47219701_val == 5) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_specificStatValues[lp_category][2], IntToText(lp_newValue), PlayerGroupSingle(lp_player));
    }
    else if (auto47219701_val == 6) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_specificStatValues[lp_category][3], IntToText(lp_newValue), PlayerGroupSingle(lp_player));
    }
    else {
        return ;
    }
}

void libAE8FC9D3_gf_KL_SetLastPlayedValue (string lp_text, string lp_image, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_lastPlayedCharImage, lp_image, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_lastPlayedLabel, StringToText(lp_text), PlayerGroupSingle(lp_player));
}

void libAE8FC9D3_gf_KL_SetLastPlayedBackground (string lp_image, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_lastPlayedBgImage, lp_image, PlayerGroupSingle(lp_player));
}

void libAE8FC9D3_gf_KL_SetCampaignCompletion (int lp_slot, int lp_difficulty, int lp_player) {
    // Automatic Variable Declarations
    int autoEE3589DE_val;

    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    autoEE3589DE_val = lp_difficulty;
    if (autoEE3589DE_val == 1) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[lp_slot], PlayerGroupSingle(lp_player), "CampaignState", "Casual");
    }
    else if (autoEE3589DE_val == 3) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[lp_slot], PlayerGroupSingle(lp_player), "CampaignState", "Normal");
    }
    else if (autoEE3589DE_val == 4) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[lp_slot], PlayerGroupSingle(lp_player), "CampaignState", "Hard");
    }
    else if (autoEE3589DE_val == 6) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[lp_slot], PlayerGroupSingle(lp_player), "CampaignState", "Brutal");
    }
    else {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[lp_slot], PlayerGroupSingle(lp_player), "CampaignState", "Normal");
    }
}

void libAE8FC9D3_gf_KL_SendCampaignCompletionMessage (string lp_message, int lp_slot, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[lp_slot], PlayerGroupSingle(lp_player), "CampaignState", lp_message);
}

void libAE8FC9D3_gf_KL_SetAchievementCompletion (fixed lp_value, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignProgressBar, lp_value, PlayerGroupSingle(lp_player));
    if ((lp_value <= 0.0)) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignProgressLabel, StringExternal("Param/Value/lib_AE8FC9D3_D516CA5F"), PlayerGroupSingle(lp_player));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_AE8FC9D3_41B69DB9", "A", FixedToText(lp_value, 1));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignProgressLabel, TextExpressionAssemble("Param/Expression/lib_AE8FC9D3_41B69DB9"), PlayerGroupSingle(lp_player));
    }
    if ((lp_value >= 100.0)) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignProgressBar, PlayerGroupSingle(lp_player), "MaxLevelStateGroup", "MaxProgressState");
    }
    else {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignProgressBar, PlayerGroupSingle(lp_player), "NotMaxLevelState", "MaxProgressState");
    }
}

void libAE8FC9D3_gf_KL_HookupFanfarePanels (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto60DC18DC_ae = 4;
    const int auto60DC18DC_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/AchievementFanfaresContainer");
    libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer = DialogControlLastCreated();
    lv_index = 0;
    for ( ; ( (auto60DC18DC_ai >= 0 && lv_index <= auto60DC18DC_ae) || (auto60DC18DC_ai < 0 && lv_index >= auto60DC18DC_ae) ) ; lv_index += auto60DC18DC_ai ) {
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("CenteredFrame/AchievementFrame" + IntToString(lv_index))));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Title"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_title[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Description"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_description[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("PointsLabel"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_icon[lv_index] = DialogControlLastCreated();
    }
}

void libAE8FC9D3_gf_KL_CreateUserProfilePanel (int lp_player) {
    // Variable Declarations
    const bool lv_carreerStatsEnabled = true;
    const bool lv_lastMatchEnabled = true;
    const bool lv_campaignCompletionEnabled = false;
    const bool lv_achievementProgressEnabled = false;
    int lv_index;
    int lv_index2;
    int lv_messageLog;

    // Automatic Variable Declarations
    const int auto76BD8D0D_ae = 4;
    const int auto76BD8D0D_ai = 1;
    const int autoED314B1A_ae = 3;
    const int autoED314B1A_ai = 1;
    const int auto963741B6_ae = 7;
    const int auto963741B6_ai = 1;
    const int auto9CF1BF8C_ae = libAE8FC9D3_gv_kL_MaxAvailableLists;
    const int auto9CF1BF8C_ai = 1;

    // Variable Initialization
    lv_messageLog = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/AchievementButton");
    libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_gameMenuButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/MessageLogDialog");
    lv_messageLog = DialogControlLastCreated();
    DialogControlHookup(lv_messageLog, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementsDialog"));
    libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementPointsLabel"));
    libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePoints = DialogControlLastCreated();
    if ((lv_carreerStatsEnabled == true)) {
        lv_index = 1;
        for ( ; ( (auto76BD8D0D_ai >= 0 && lv_index <= auto76BD8D0D_ae) || (auto76BD8D0D_ai < 0 && lv_index >= auto76BD8D0D_ae) ) ; lv_index += auto76BD8D0D_ai ) {
            DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/MatchStoryPanel/UserProfileSummaryStatsFrame/StatsFrame" + IntToString(lv_index) + "/CareerGamesValue")));
            libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_statsGlobalValues[lv_index][1] = DialogControlLastCreated();
            DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/MatchStoryPanel/UserProfileSummaryStatsFrame/StatsFrame" + IntToString(lv_index) + "/WinsValue")));
            libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_statsGlobalValues[lv_index][2] = DialogControlLastCreated();
            DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/MatchStoryPanel/UserProfileSummaryStatsFrame/StatsFrame" + IntToString(lv_index) + "/StandardGlobalStat1Value")));
            libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_statsGlobalValues[lv_index][3] = DialogControlLastCreated();
            lv_index2 = 1;
            for ( ; ( (autoED314B1A_ai >= 0 && lv_index2 <= autoED314B1A_ae) || (autoED314B1A_ai < 0 && lv_index2 >= autoED314B1A_ae) ) ; lv_index2 += autoED314B1A_ai ) {
                DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/MatchStoryPanel/UserProfileSummaryStatsFrame/StatsFrame" + IntToString(lv_index) + "/KillStatValue" + IntToString(lv_index2))));
                libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_specificStatValues[lv_index][lv_index2] = DialogControlLastCreated();
            }
        }
    }

    if ((lv_lastMatchEnabled == true)) {
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/LastMatchPanel/LastUsedCharacterFrame/LastGameBackgroundContainer/CharacterLabel")));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_lastPlayedLabel = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/LastMatchPanel/LastUsedCharacterFrame/LastGameBackgroundContainer/CharacterImage")));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_lastPlayedCharImage = DialogControlLastCreated();
    }

    if ((lv_campaignCompletionEnabled == true)) {
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementsFrame/CampaignPanel/UserProfileSummaryCampaignFrame/CampaignContainer/AlphaCompletionFrame"));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[1] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementsFrame/CampaignPanel/UserProfileSummaryCampaignFrame/CampaignContainer/BetaCompletionFrame"));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[2] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementsFrame/CampaignPanel/UserProfileSummaryCampaignFrame/CampaignContainer/CharlieCompletionFrame"));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignCompletion[3] = DialogControlLastCreated();
    }

    if ((lv_achievementProgressEnabled == true)) {
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementsFrame/CampaignPanel/UserProfileSummaryAchievementFrame/AchievementsContainer/LevelProgressBar"));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignProgressBar = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementsFrame/CampaignPanel/UserProfileSummaryAchievementFrame/AchievementsContainer/ProgressLabel"));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_campaignProgressLabel = DialogControlLastCreated();
    }

    lv_index = 0;
    for ( ; ( (auto963741B6_ai >= 0 && lv_index <= auto963741B6_ae) || (auto963741B6_ai < 0 && lv_index >= auto963741B6_ae) ) ; lv_index += auto963741B6_ai ) {
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/RecentAchievementsListBox/AchievementItem" + IntToString(lv_index))));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Icon)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Title)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemTitle[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Description)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDescription[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Points)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemPoints[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Date)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDate[lv_index] = DialogControlLastCreated();
    }
    lv_index = 1;
    for ( ; ( (auto9CF1BF8C_ai >= 0 && lv_index <= auto9CF1BF8C_ae) || (auto9CF1BF8C_ai < 0 && lv_index >= auto9CF1BF8C_ae) ) ; lv_index += auto9CF1BF8C_ai ) {
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/AchievementListbox" + IntToString(lv_index) + "/CategoryPointsFrame/CategoryProgressBar")));
        libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index].lv_listboxCategoryProgress = DialogControlLastCreated();
    }
    libAE8FC9D3_gf_KL_UpdateUserProfile(lp_player);
}

void libAE8FC9D3_gf_KL_HoDItemInListbox (int lp_player, int lp_listBox, int lp_achievementItem) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem] != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/AchievementListbox" + IntToString(lp_listBox) + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_achievementItem))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Icon))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_icon[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Title))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_title[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Points))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_pointsLabel[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Description))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_description[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Date))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_completionLabel[lp_achievementItem] = DialogControlLastCreated();
}

void libAE8FC9D3_gf_KL_HoDProgressPanel (int lp_player, int lp_listBox, int lp_achievementItem) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem] == c_invalidDialogControlId)) {
        return ;
    }

    if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_progressFrame[lp_achievementItem] != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementFrame/ExpandFrame/ProgressContainerFrame"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_progressFrame[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_progressFrame[lp_achievementItem], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("ProgressBar"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_progressBar[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_progressFrame[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("NextAchievementLabel"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_progressNextAchievement[lp_achievementItem] = DialogControlLastCreated();
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_progressFrame[lp_achievementItem], PlayerGroupSingle(lp_player), true);
}

void libAE8FC9D3_gf_KL_HoDSeriesPanels (int lp_player, int lp_listBox, int lp_achievementItem, int lp_seriesItem) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem] == c_invalidDialogControlId)) {
        return ;
    }

    if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem] == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementFrame/ExpandFrame/SeriesContainerFrame"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesPanel[lp_achievementItem] = DialogControlLastCreated();
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesPanel[lp_achievementItem], PlayerGroupSingle(lp_player), true);
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesPanel[lp_achievementItem], c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementSeriesFrame" + IntToString(lp_seriesItem))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesFrames[lp_achievementItem][lp_seriesItem] = DialogControlLastCreated();
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesFrames[lp_achievementItem][lp_seriesItem], PlayerGroupSingle(lp_player), true);
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesFrames[lp_achievementItem][lp_seriesItem], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Icon)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesDummyIcon[lp_achievementItem][lp_seriesItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesFrames[lp_achievementItem][lp_seriesItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Description)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesDummyDescription[lp_achievementItem][lp_seriesItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesFrames[lp_achievementItem][lp_seriesItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Date)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesDummyDate[lp_achievementItem][lp_seriesItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesFrames[lp_achievementItem][lp_seriesItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Points)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesDummyPoints[lp_achievementItem][lp_seriesItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesFrames[lp_achievementItem][lp_seriesItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Title)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_seriesDummyTitle[lp_achievementItem][lp_seriesItem] = DialogControlLastCreated();
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], PlayerGroupSingle(lp_player), true);
    if (true) {
    }

}

void libAE8FC9D3_gf_KL_UpdateAchiProgress (string lp_achievement, int lp_valueIncrease, int lp_player, bool lp_saveToBank) {
    // Variable Declarations
    int lv_currentValue;
    int lv_maxValue;
    int lv_seriesSize;
    int lv_seriesIndex;
    int lv_seriesCurrentValue;
    int lv_seriesMaxValue;

    // Automatic Variable Declarations
    int auto9654AD91_ae;
    const int auto9654AD91_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    if ((!((libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lp_achievement) > 0))) && ((lp_achievement == null) || (libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lp_achievement) == true))) {
        return ;
    }

    if ((libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lp_achievement) > 0) && (libAE8FC9D3_gf_PlayerHasAchievement(lp_player, libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lp_achievement), lp_achievement)) == true)) {
        return ;
    }

    lv_currentValue = libAE8FC9D3_gf_KL_ReturnAchievementProgressUser(lp_player, lp_achievement);
    lv_currentValue += lp_valueIncrease;
    lv_maxValue = libAE8FC9D3_gf_ReturnAchievementProgressMax(lp_achievement);
    if ((libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lp_achievement) > 0)) {
        lv_seriesSize = libAE8FC9D3_gf_KL_ReturnAchievementSeriesSize(lp_achievement);
        lv_currentValue = libAE8FC9D3_gf_KL_ReturnAchievementProgressUser(lp_player, libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesSize, lp_achievement));
        lv_currentValue += lp_valueIncrease;
        lv_maxValue = libAE8FC9D3_gf_ReturnAchievementProgressMax(libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesSize, lp_achievement));
        auto9654AD91_ae = lv_seriesSize;
        lv_seriesIndex = 0;
        for ( ; ( (auto9654AD91_ai >= 0 && lv_seriesIndex <= auto9654AD91_ae) || (auto9654AD91_ai < 0 && lv_seriesIndex >= auto9654AD91_ae) ) ; lv_seriesIndex += auto9654AD91_ai ) {
            lv_seriesCurrentValue = lv_currentValue;
            lv_seriesMaxValue = libAE8FC9D3_gf_ReturnAchievementProgressMax(libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesIndex, lp_achievement));
            if ((lp_saveToBank == true)) {
                if ((lv_seriesCurrentValue > lv_seriesMaxValue)) {
                    lv_seriesCurrentValue = lv_seriesMaxValue;
                }

                UserDataSetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesIndex, lp_achievement), "Current Count", 1, lv_seriesCurrentValue);
                BankValueSetFromInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesIndex, lp_achievement), "ID", 1) + "Progress"), lv_seriesCurrentValue);
            }
            else {
                if ((lv_seriesCurrentValue > lv_seriesMaxValue)) {
                    lv_seriesCurrentValue = lv_seriesMaxValue;
                    UserDataSetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesIndex, lp_achievement), "Current Count", 1, lv_seriesCurrentValue);
                }
                else {
                    UserDataSetInt("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesIndex, lp_achievement), "Current Count", 1, lv_seriesCurrentValue);
                }
            }
            if ((lv_seriesCurrentValue == lv_seriesMaxValue)) {
                if ((lp_saveToBank == false)) {
                    BankValueSetFromInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesIndex, lp_achievement), "ID", 1) + "Progress"), lv_seriesCurrentValue);
                    libAE8FC9D3_gf_KL_BankSave(lp_player, true);
                }

                libAE8FC9D3_gf_AwardAchievement(libAE8FC9D3_gf_KL_ReturnAchievementSeriesIteminIndex(lv_seriesIndex, lp_achievement), lp_player);
            }

        }
        libAE8FC9D3_gf_KL_UpdateUserProfile(1);
        if ((lp_saveToBank == true)) {
            libAE8FC9D3_gf_KL_BankSave(lp_player, true);
        }

    }
    else {
        if ((lp_saveToBank == true)) {
            if ((lv_currentValue > lv_maxValue)) {
                lv_currentValue = lv_maxValue;
            }

            UserDataSetInt("Achievements", lp_achievement, "Current Count", 1, lv_currentValue);
            BankValueSetFromInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"), lv_currentValue);
            libAE8FC9D3_gf_KL_BankSave(lp_player, true);
        }
        else {
            if ((lv_currentValue > lv_maxValue)) {
                lv_currentValue = lv_maxValue;
                UserDataSetInt("Achievements", lp_achievement, "Current Count", 1, lv_currentValue);
            }
            else {
                UserDataSetInt("Achievements", lp_achievement, "Current Count", 1, lv_currentValue);
            }
            libAE8FC9D3_gf_KL_UpdateUserProfile(1);
        }
        if ((lv_currentValue == lv_maxValue)) {
            if ((lp_saveToBank == false)) {
                BankValueSetFromInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"), lv_currentValue);
                libAE8FC9D3_gf_KL_BankSave(lp_player, true);
            }

            libAE8FC9D3_gf_AwardAchievement(lp_achievement, lp_player);
        }

    }
}

void libAE8FC9D3_gf_KL_AwardAchi (string lp_achievement, int lp_player) {
    // Automatic Variable Declarations
    int autoA9B8164C_val;

    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementsInitialized[lp_player] == false)) {
        return ;
    }

    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lp_achievement) == true)) {
        return ;
    }

    libAE8FC9D3_gf_KL_StoreAchievementKey(lp_player, lp_achievement);
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, PlayerGroupSingle(lp_player), "Show");
    libAE8FC9D3_gf_KL_DisplayAchievement(lp_achievement, lp_player);
    UserDataSetString("Achievements", lp_achievement, "AwardState", 1, "Awarded");
    TriggerSendEvent("KL_AchievementAwarded");
    autoA9B8164C_val = lp_player;
    if (autoA9B8164C_val == 1) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP1, true, false);
    }
    else if (autoA9B8164C_val == 2) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP2, true, false);
    }
    else if (autoA9B8164C_val == 3) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP3, true, false);
    }
    else if (autoA9B8164C_val == 4) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP4, true, false);
    }
    else if (autoA9B8164C_val == 5) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP5, true, false);
    }
    else if (autoA9B8164C_val == 6) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP6, true, false);
    }
    else if (autoA9B8164C_val == 7) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP7, true, false);
    }
    else if (autoA9B8164C_val == 8) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP8, true, false);
    }
    else if (autoA9B8164C_val == 9) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP9, true, false);
    }
    else if (autoA9B8164C_val == 10) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP10, true, false);
    }
    else if (autoA9B8164C_val == 11) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP11, true, false);
    }
    else if (autoA9B8164C_val == 12) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP12, true, false);
    }
    else {
    }
}

void libAE8FC9D3_gf_AchievementAwarded (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "KL_AchievementAwarded");
}

trigger auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger = null;
int auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_player;
string auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_achievement;

void libAE8FC9D3_gf_KL_StoreRecentAchievementID (int lp_player, string lp_achievement) {
    auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_player = lp_player;
    auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_achievement = lp_achievement;

    if (auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_player;
    string lp_achievement = auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_achievement;

    // Variable Declarations
    int lv_index;
    int lv_lastEmptySlot;
    string lv_tempString;
    int lv_tempIndex;

    // Automatic Variable Declarations
    const int auto505057AD_ae = 7;
    const int auto505057AD_ai = 1;
    const int auto25790598_ae = 0;
    const int auto25790598_ai = -1;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    lv_index = 0;
    for ( ; ( (auto505057AD_ai >= 0 && lv_index <= auto505057AD_ae) || (auto505057AD_ai < 0 && lv_index >= auto505057AD_ae) ) ; lv_index += auto505057AD_ai ) {
        lv_lastEmptySlot = lv_index;
        if ((BankKeyExists(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index))) == false)) {
            break;
        }

    }
    if ((lv_lastEmptySlot == 0)) {
        BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, "Slot 0", UserDataGetString("Achievements", lp_achievement, "ID", 1));
        return true;
    }

    lv_index = 8;
    for ( ; ( (auto25790598_ai >= 0 && lv_index <= auto25790598_ae) || (auto25790598_ai < 0 && lv_index >= auto25790598_ae) ) ; lv_index += auto25790598_ai ) {
        if ((BankKeyExists(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index))) == false)) {
        }
        else {
            lv_tempIndex = (lv_index + 1);
            lv_tempString = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index)));
            BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_tempIndex)), lv_tempString);
        }
    }
    BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, "Slot 0", UserDataGetString("Achievements", lp_achievement, "ID", 1));
    return true;
}

trigger auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger = null;
int auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_player;
string auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_achievement;

void libAE8FC9D3_gf_KL_StoreAchievementKey (int lp_player, string lp_achievement) {
    auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_player = lp_player;
    auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_achievement = lp_achievement;

    if (auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_StoreAchievementKey_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_StoreAchievementKey_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_player;
    string lp_achievement = auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_achievement;

    // Variable Declarations
    string lv_dateDay;
    string lv_dateMonth;
    string lv_dateYear;
    int lv_tempDate;
    string lv_convertedDate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dateDay = "";
    lv_dateMonth = "";
    lv_dateYear = "";
    lv_convertedDate = "";

    // Implementation
    if ((lp_achievement == null)) {
        return true;
    }

    BankValueSetFromFlag(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "State"), true);
    lv_tempDate = GetDateTimeDay(CurrentDateTimeGet());
    if ((lv_tempDate <= 9)) {
        lv_dateDay = ("0" + IntToString(lv_tempDate));
    }
    else {
        lv_dateDay = (IntToString(lv_tempDate));
    }
    lv_tempDate = GetDateTimeMonth(CurrentDateTimeGet());
    if ((lv_tempDate <= 9)) {
        lv_dateMonth = ("0" + IntToString(lv_tempDate));
    }
    else {
        lv_dateMonth = (IntToString(lv_tempDate));
    }
    lv_dateYear = IntToString(GetDateTimeYear(CurrentDateTimeGet()));
    lv_convertedDate = (lv_dateDay + "/" + lv_dateMonth + "/" + lv_dateYear);
    BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Date"), lv_convertedDate);
    libAE8FC9D3_gf_KL_StoreRecentAchievementID(lp_player, lp_achievement);
    libAE8FC9D3_gf_KL_BankSave(lp_player, true);
    return true;
}

trigger auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger = null;
string auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_achievement;
int auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_player;

void libAE8FC9D3_gf_KL_DisplayAchievement (string lp_achievement, int lp_player) {
    auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_achievement = lp_achievement;
    auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_player = lp_player;

    if (auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_DisplayAchievement_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_DisplayAchievement_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_achievement;
    int lp_player = auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_player;

    // Variable Declarations
    int lv_index;
    int lv_maxAchievements;
    int lv_minAchievements;
    const fixed lv_animationTotal = 3.5;
    const fixed lv_animationDelay = 0.5;
    int lv_inactiveIndex;

    // Automatic Variable Declarations
    bool auto246BDD06_val;
    const int auto354DEA22_ae = 0;
    const int auto354DEA22_ai = -1;
    string auto83E8DCE2_val;

    // Variable Initialization
    lv_maxAchievements = 4;

    // Implementation
    auto246BDD06_val = UIFrameVisible(lp_player, c_syncFrameTypeConsolePanel);
    if (auto246BDD06_val == true) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, PlayerGroupSingle(lp_player), "MenuPresence", "InGame");
        lv_maxAchievements = 3;
    }
    else if (auto246BDD06_val == false) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, PlayerGroupSingle(lp_player), "MenuPresence", "InMenu");
        lv_maxAchievements = 4;
    }
    else {
    }
    while (true) {
        lv_index = lv_maxAchievements;
        for ( ; ( (auto354DEA22_ai >= 0 && lv_index <= auto354DEA22_ae) || (auto354DEA22_ai < 0 && lv_index >= auto354DEA22_ae) ) ; lv_index += auto354DEA22_ai ) {
            if ((libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_index] == false)) {
                lv_inactiveIndex = lv_index;
                break;
            }

        }
        if ((libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_inactiveIndex] == false)) {
            break;
        }

        Wait(lv_animationDelay, c_timeReal);
    }
    libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_inactiveIndex] = true;
    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_icon[lv_inactiveIndex], UserDataGetImagePath("Achievements", lp_achievement, "Icon", 1), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_title[lv_inactiveIndex], UserDataGetText("Achievements", lp_achievement, "Title", 1), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_description[lv_inactiveIndex], UserDataGetText("Achievements", lp_achievement, "Description", 1), PlayerGroupSingle(lp_player));
    if ((UserDataGetInt("Achievements", lp_achievement, "Points", 1) <= 0)) {
        DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lv_inactiveIndex], PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lv_inactiveIndex], PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lv_inactiveIndex], IntToText(UserDataGetInt("Achievements", lp_achievement, "Points", 1)), PlayerGroupSingle(lp_player));
    }
    auto83E8DCE2_val = UserDataGetGameLink("Achievements", lp_achievement, "Race", 1);
    if (auto83E8DCE2_val == "Terr") {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), "StyleStateGroup", "TerranState");
    }
    else if (auto83E8DCE2_val == "Zerg") {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), "StyleStateGroup", "ZergState");
    }
    else if (auto83E8DCE2_val == "Prot") {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), "StyleStateGroup", "ProtossState");
    }
    else {
    }
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), true);
    Wait((lv_animationTotal + (lv_animationDelay * lv_inactiveIndex)), c_timeReal);
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), false);
    libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_inactiveIndex] = false;
    return true;
}

int libAE8FC9D3_gf_KL_ReturnAchievementProgressBank (int lp_player, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    return BankValueGetAsInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"));
}

int libAE8FC9D3_gf_KL_ReturnAchievementProgressUser (int lp_player, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Achievements", lp_achievement, "Current Count", 1);
}

bool libAE8FC9D3_gf_KL_PlayerAchievementState (int lp_player, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankValueGetAsFlag(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "State")) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bank libAE8FC9D3_gf_KL_ReturnPlayerBank (int lp_player) {
    // Variable Declarations
    bool lv_achievementState;

    // Automatic Variable Declarations
    int auto3584967D_val;

    // Variable Initialization

    // Implementation
    auto3584967D_val = lp_player;
    if (auto3584967D_val == 1) {
        return libAE8FC9D3_gv_KL_SharedBankP1;
    }
    else if (auto3584967D_val == 2) {
        return libAE8FC9D3_gv_KL_SharedBankP2;
    }
    else if (auto3584967D_val == 3) {
        return libAE8FC9D3_gv_KL_SharedBankP3;
    }
    else if (auto3584967D_val == 4) {
        return libAE8FC9D3_gv_KL_SharedBankP4;
    }
    else if (auto3584967D_val == 5) {
        return libAE8FC9D3_gv_KL_SharedBankP5;
    }
    else if (auto3584967D_val == 6) {
        return libAE8FC9D3_gv_KL_SharedBankP6;
    }
    else if (auto3584967D_val == 7) {
        return libAE8FC9D3_gv_KL_SharedBankP7;
    }
    else if (auto3584967D_val == 8) {
        return libAE8FC9D3_gv_KL_SharedBankP8;
    }
    else if (auto3584967D_val == 9) {
        return libAE8FC9D3_gv_KL_SharedBankP9;
    }
    else if (auto3584967D_val == 10) {
        return libAE8FC9D3_gv_KL_SharedBankP10;
    }
    else if (auto3584967D_val == 11) {
        return libAE8FC9D3_gv_KL_SharedBankP11;
    }
    else if (auto3584967D_val == 12) {
        return libAE8FC9D3_gv_KL_SharedBankP12;
    }
    else {
        return null;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: KL_MenuBarOpenAchievements
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_MenuBarOpenAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAE8FC9D3_gv_kL_UserProfile[EventPlayer()].lv_gameMenuButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAE8FC9D3_gf_ShowUserProfile(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_MenuBarOpenAchievements_Init () {
    libAE8FC9D3_gt_KL_MenuBarOpenAchievements = TriggerCreate("libAE8FC9D3_gt_KL_MenuBarOpenAchievements_Func");
    TriggerAddEventDialogControl(libAE8FC9D3_gt_KL_MenuBarOpenAchievements, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_ReloadUI
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_ReloadUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAE8FC9D3_gf_KL_UpdateUserProfile(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_ReloadUI_Init () {
    libAE8FC9D3_gt_KL_ReloadUI = TriggerCreate("libAE8FC9D3_gt_KL_ReloadUI_Func");
    TriggerAddEventLoadGameDone(libAE8FC9D3_gt_KL_ReloadUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P1
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 1;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP1_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP1 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P2
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP2_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP2 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P3
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP3_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP3 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P4
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 4;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP4_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP4 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P5
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP5_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP5 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P6
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 6;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP6_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP6 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P7
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 7;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP7_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP7 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP7_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P8
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP8_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP8 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP8_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P9
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 9;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP9_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP9 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP9_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P10
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 10;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP10_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP10 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP10_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P11
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 11;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP11_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP11 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P12
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 12;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP12_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP12 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP12_Func");
}

void libAE8FC9D3_InitTriggers () {
    libAE8FC9D3_gt_KL_MenuBarOpenAchievements_Init();
    libAE8FC9D3_gt_KL_ReloadUI_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP1_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP2_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP3_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP4_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP5_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP6_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP7_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP8_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP9_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP10_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP11_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP12_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_InitLib_completed = false;

void libAE8FC9D3_InitLib () {
    if (libAE8FC9D3_InitLib_completed) {
        return;
    }

    libAE8FC9D3_InitLib_completed = true;

    libAE8FC9D3_InitLibraries();
    libAE8FC9D3_InitVariables();
    libAE8FC9D3_InitTriggers();
}

