include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Koprulu Achievements
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAE8FC9D3_ge_KL_AchievementCategories_NoCategory = 0;
const int libAE8FC9D3_ge_KL_AchievementCategories_Roles = 1;
const int libAE8FC9D3_ge_KL_AchievementCategories_RolesHuman = 2;
const int libAE8FC9D3_ge_KL_AchievementCategories_RolesAndroid = 3;
const int libAE8FC9D3_ge_KL_AchievementCategories_RolesAlien = 4;
const int libAE8FC9D3_ge_KL_AchievementCategories_RolesPsion = 5;
const int libAE8FC9D3_ge_KL_AchievementCategories_Jobs = 6;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsEngineer = 7;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsDoctor = 8;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsMiner = 9;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsCaptain = 10;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsSecurityGuard = 11;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsOfficer = 12;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsMajor = 13;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsSergeant = 14;
const int libAE8FC9D3_ge_KL_AchievementCategories_JobsLieutenant = 15;
const int libAE8FC9D3_ge_KL_AchievementCategories_Items = 16;
const int libAE8FC9D3_ge_KL_AchievementCategories_Veterancy = 17;
const int libAE8FC9D3_ge_KL_AchievementCategories_Locations = 18;
const int libAE8FC9D3_ge_KL_AchievementCategories_FeatsOfStrength = 19;
const int libAE8FC9D3_ge_KL_AchievementCategories_Patreons = 20;
const int libAE8FC9D3_ge_KL_DummyFrameType_Icon = 0x00000001;
const int libAE8FC9D3_ge_KL_DummyFrameType_Title = 0x00000002;
const int libAE8FC9D3_ge_KL_DummyFrameType_Description = 0x00000004;
const int libAE8FC9D3_ge_KL_DummyFrameType_Points = 0x00000008;
const int libAE8FC9D3_ge_KL_DummyFrameType_Date = 0x00000010;

// Constants
const string libAE8FC9D3_gv_kL_AchievementSectionConstant = "KLClassic";
const int libAE8FC9D3_gv_kL_MaxPlayers = 16;
const int libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots = 20;
const int libAE8FC9D3_gv_kL_MaxAvailableLists = 10;

// Structures
struct libAE8FC9D3_gs_KL_AchievementFanfarePanel {
    int lv_fanfareContainer;
    int[5] lv_achievementFrames;
    int[5] lv_title;
    int[5] lv_description;
    int[5] lv_pointsLabel;
    int[5] lv_icon;
};

struct libAE8FC9D3_gs_KL_UserProfile {
    int lv_gameMenuButton;
    int lv_userProfilePanel;
    int lv_closeButton;
    int[8] lv_recentAchievementItem;
    int[8] lv_recentItemTitle;
    int[8] lv_recentItemDescription;
    int[8] lv_recentItemPoints;
    int[8] lv_recentItemIcon;
    int[8] lv_recentItemDate;
};

struct libAE8FC9D3_gs_KL_AchievementListbox {
    int lv_listboxFilter;
    int lv_listboxCategoryPanel;
    int lv_listboxCategoryProgress;
    int lv_listboxCategoryProgressMax;
    int lv_listboxCategoryProgressCurrent;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_achievementItems;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_title;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_description;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_icon;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_pointsLabel;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_completionLabel;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_seriesFrames;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_seriesDummyIcon;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_seriesDummyTitle;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_seriesDummyDescription;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_seriesDummyPoints;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_seriesDummyDate;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_rewardCount;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_rewardCountLabel;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_rewardCountExtended;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_rewardCountExtendedLabel;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_rewardFrames;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_rewardIcons;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_rewardTypeLabel;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1][20] lv_rewardNameLabel;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_progressFrame;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_progressBar;
    int[libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots + 1] lv_progressNextAchievement;
};

// Variable Declarations
int[libAE8FC9D3_gv_kL_MaxAvailableLists + 1] libAE8FC9D3_gv_kL_AchievementIndexing;
libAE8FC9D3_gs_KL_AchievementFanfarePanel[libAE8FC9D3_gv_kL_MaxPlayers + 1] libAE8FC9D3_gv_kL_AchievementFanfarePanel;
libAE8FC9D3_gs_KL_UserProfile[libAE8FC9D3_gv_kL_MaxPlayers + 1] libAE8FC9D3_gv_kL_UserProfile;
libAE8FC9D3_gs_KL_AchievementListbox[libAE8FC9D3_gv_kL_MaxPlayers + 1][libAE8FC9D3_gv_kL_MaxAvailableLists + 1] libAE8FC9D3_gv_kL_AchievementListbox;
bank libAE8FC9D3_gv_KL_SharedBankP1;
bank libAE8FC9D3_gv_KL_SharedBankP2;
bank libAE8FC9D3_gv_KL_SharedBankP3;
bank libAE8FC9D3_gv_KL_SharedBankP4;
bank libAE8FC9D3_gv_KL_SharedBankP5;
bank libAE8FC9D3_gv_KL_SharedBankP6;
bank libAE8FC9D3_gv_KL_SharedBankP7;
bank libAE8FC9D3_gv_KL_SharedBankP8;
bank libAE8FC9D3_gv_KL_SharedBankP9;
bank libAE8FC9D3_gv_KL_SharedBankP10;
bank libAE8FC9D3_gv_KL_SharedBankP11;
bank libAE8FC9D3_gv_KL_SharedBankP12;
bool[libAE8FC9D3_gv_kL_MaxPlayers + 1][5] libAE8FC9D3_gv_kL_ActiveAchievement;
string[21][51] libAE8FC9D3_gv_kL_ActiveInstances;
int[21] libAE8FC9D3_gv_kL_MaxActiveInstances;
int libAE8FC9D3_gv_achievements;

// Function Declarations
void libAE8FC9D3_gf_ShowUserProfile (int lp_player);
void libAE8FC9D3_gf_InitializeAchievements ();
void libAE8FC9D3_gf_UpdateAchievementProgress (string lp_achievement, int lp_valueIncrease, int lp_player);
void libAE8FC9D3_gf_AwardAchievement (string lp_achievement, int lp_player);
bool libAE8FC9D3_gf_PlayerHasAchievement (int lp_player, string lp_achievement);
bank libAE8FC9D3_gf_ReturnPlayerBank (int lp_player);
void libAE8FC9D3_gf_KL_InitAchi ();
void libAE8FC9D3_gf_KL_BankPreload (int lp_player);
void libAE8FC9D3_gf_KL_BankLoad (int lp_Player);
void libAE8FC9D3_gf_KL_BankSave (int lp_player, bool lp_update);
void libAE8FC9D3_gf_KL_ToggleProfileDisplay (bool lp_showHide, int lp_player);
string libAE8FC9D3_gf_KL_ReturnListID (int lp_list);
string libAE8FC9D3_gf_KL_ReturnListbyID (string lp_listID);
int libAE8FC9D3_gf_KL_ReturnListIndex (int lp_list);
bool libAE8FC9D3_gf_KL_ReturnRecentAchievement (int lp_player, int lp_slot, string lp_achievement);
string libAE8FC9D3_gf_KL_ReturnAchievementFromID (int lp_player, int lp_slot);
int libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement (int lp_index);
string libAE8FC9D3_gf_KL_ReturnDummyFramePath (int lp_type);
void libAE8FC9D3_gf_KL_UpdateAchievementItemData (int lp_player);
void libAE8FC9D3_gf_KL_UpdateUserProfile (int lp_player);
void libAE8FC9D3_gf_KL_UpdateRecentAchievements (int lp_player);
void libAE8FC9D3_gf_KL_HookupFanfarePanels (int lp_player);
void libAE8FC9D3_gf_KL_CreateUserProfilePanel (int lp_player);
void libAE8FC9D3_gf_KL_HoDItemInListbox (int lp_player, int lp_listBox, int lp_achievementItem);
void libAE8FC9D3_gf_KL_HookupProfileSummary (int lp_player);
void libAE8FC9D3_gf_KL_HookupAchievementLists (int lp_player);
void libAE8FC9D3_gf_KL_HookupSeriesFrames (int lp_player, int lp_index1, int lp_index2, int lp_index3, string lp_list);
void libAE8FC9D3_gf_KL_HookupRewardFrames (int lp_player, int lp_index1, int lp_index2, int lp_index3, string lp_list);
void libAE8FC9D3_gf_KL_UpdateAchiProgress (string lp_achievement, int lp_valueIncrease, int lp_player);
void libAE8FC9D3_gf_KL_AwardAchi (string lp_achievement, int lp_player);
void libAE8FC9D3_gf_KL_StoreRecentAchievementID (int lp_player, string lp_achievement);
void libAE8FC9D3_gf_KL_StoreAchievementKey (int lp_player, string lp_achievement);
void libAE8FC9D3_gf_KL_DisplayAchievement (string lp_achievement, int lp_player);
int libAE8FC9D3_gf_KL_ReturnAchievementProgress (int lp_player, string lp_achievement);
bool libAE8FC9D3_gf_KL_PlayerAchievementState (int lp_player, string lp_achievement);
bank libAE8FC9D3_gf_KL_ReturnPlayerBank (int lp_player);
void libAE8FC9D3_gf_InitializeAchievementsOld ();
void libAE8FC9D3_gf_KL_UpdateSummaryPanels (int lp_player, string lp_achievement);
void libAE8FC9D3_gf_KL_SetAchievementPanelData (int lp_player, string lp_achievement, int lp_category, bool lp_displayLastEarned);
void libAE8FC9D3_gf_KL_CheckAchievementSeries (int lp_player, string lp_achievement, int lp_category, int lp_slot, bool lp_displayLastEarned);
void libAE8FC9D3_gf_KL_CheckAchievementRewards (int lp_player, string lp_achievement, int lp_category, int lp_slot);
void libAE8FC9D3_gf_KL_CheckAchievementProgress (int lp_player, string lp_achievement, int lp_category, int lp_slot);
void libAE8FC9D3_gf_KL_UpdateAchievementPanelData (int lp_player);
void libAE8FC9D3_gf_KL_AchievementMenuData (int lp_player);

// Trigger Declarations
trigger libAE8FC9D3_gt_MenuBarOpenAchievements;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP1;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP2;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP3;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP4;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP5;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP6;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP7;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP8;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP9;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP10;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP11;
trigger libAE8FC9D3_gt_KL_HideAchievementPanelP12;

// Library Initialization
void libAE8FC9D3_InitVariables ();

