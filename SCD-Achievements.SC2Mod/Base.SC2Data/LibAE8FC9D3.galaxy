include "TriggerLibs/NativeLib"

include "LibAE8FC9D3_h"

//--------------------------------------------------------------------------------------------------
// Library: Koprulu Achievements
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAE8FC9D3_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libAE8FC9D3_InitVariables_completed = false;

void libAE8FC9D3_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libAE8FC9D3_InitVariables_completed) {
        return;
    }

    libAE8FC9D3_InitVariables_completed = true;

    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxAvailableLists; init_i += 1) {
        libAE8FC9D3_gv_kL_AchievementIndexing[init_i] = 20;
    }
    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxPlayers; init_i += 1) {
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_fanfareContainer = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_achievementFrames[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_title[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_description[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_pointsLabel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            libAE8FC9D3_gv_kL_AchievementFanfarePanel[init_i].lv_icon[init_i1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxPlayers; init_i += 1) {
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_gameMenuButton = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_userProfilePanel = c_invalidDialogControlId;
        libAE8FC9D3_gv_kL_UserProfile[init_i].lv_closeButton = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentAchievementItem[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemTitle[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemDescription[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemPoints[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            libAE8FC9D3_gv_kL_UserProfile[init_i].lv_recentItemDate[init_i1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libAE8FC9D3_gv_kL_MaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_listboxFilter = c_invalidDialogControlId;
            libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_listboxCategoryPanel = c_invalidDialogControlId;
            libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_listboxCategoryProgress = c_invalidDialogControlId;
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_achievementItems[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_title[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_description[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_icon[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_pointsLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_completionLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesFrames[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyIcon[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyTitle[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyDescription[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyPoints[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_seriesDummyDate[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCount[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCountLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCountExtended[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardCountExtendedLabel[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardFrames[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardIcons[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardTypeLabel[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                for (init_j1 = 0; init_j1 <= 19; init_j1 += 1) {
                    libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_rewardNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
                }
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_progressFrame[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_progressBar[init_i1] = c_invalidDialogControlId;
            }
            for (init_i1 = 0; init_i1 <= libAE8FC9D3_gv_kL_MaxAvailableAchievementSlots; init_i1 += 1) {
                libAE8FC9D3_gv_kL_AchievementListbox[init_i][init_j].lv_progressNextAchievement[init_i1] = c_invalidDialogControlId;
            }
        }
    }
}

// Presets
// Functions
void libAE8FC9D3_gf_ShowUserProfile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_ToggleProfileDisplay(true, lp_player);
}

void libAE8FC9D3_gf_InitializeAchievements () {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_InitAchi();
}

void libAE8FC9D3_gf_UpdateAchievementProgress (string lp_achievement, int lp_valueIncrease, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_UpdateAchiProgress(lp_achievement, lp_valueIncrease, lp_player);
}

void libAE8FC9D3_gf_AwardAchievement (string lp_achievement, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_AwardAchi(lp_achievement, lp_player);
}

bool libAE8FC9D3_gf_PlayerHasAchievement (int lp_player, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    return libAE8FC9D3_gf_KL_PlayerAchievementState(lp_player, lp_achievement);
}

bank libAE8FC9D3_gf_ReturnPlayerBank (int lp_player) {
    // Variable Declarations
    bool lv_achievementState;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return libAE8FC9D3_gf_KL_ReturnPlayerBank(lp_player);
}

void libAE8FC9D3_gf_KL_InitAchi () {
    // Variable Declarations
    int lv_activePlayers;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto79AB33C1_g;
    int auto79AB33C1_var;

    // Variable Initialization

    // Implementation
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAchievementsButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogMessageLogButton, false);
    auto79AB33C1_g = PlayerGroupActive();
    auto79AB33C1_var = -1;
    while (true) {
        auto79AB33C1_var = PlayerGroupNextPlayer(auto79AB33C1_g, auto79AB33C1_var);
        if (auto79AB33C1_var < 0) { break; }
        lv_activePlayers += 1;
        libAE8FC9D3_gf_KL_BankLoad(lv_activePlayers);
        libAE8FC9D3_gf_KL_HookupFanfarePanels(lv_activePlayers);
        libAE8FC9D3_gf_KL_CreateUserProfilePanel(lv_activePlayers);
    }
}

void libAE8FC9D3_gf_KL_BankPreload (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoBD033E34_val;

    // Variable Initialization

    // Implementation
    autoBD033E34_val = lp_player;
    if (autoBD033E34_val == 1) {
    }
    else if (autoBD033E34_val == 2) {
    }
    else if (autoBD033E34_val == 3) {
    }
    else if (autoBD033E34_val == 4) {
    }
    else if (autoBD033E34_val == 5) {
    }
    else if (autoBD033E34_val == 6) {
    }
    else if (autoBD033E34_val == 7) {
    }
    else if (autoBD033E34_val == 8) {
    }
    else if (autoBD033E34_val == 9) {
    }
    else if (autoBD033E34_val == 10) {
    }
    else if (autoBD033E34_val == 11) {
    }
    else if (autoBD033E34_val == 12) {
    }
    else {
    }
}

void libAE8FC9D3_gf_KL_BankLoad (int lp_Player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto79C994B7_ae;
    const int auto79C994B7_ai = 1;

    // Variable Initialization

    // Implementation
    libAE8FC9D3_gf_KL_BankPreload(lp_Player);
    if ((lp_Player == 1)) {
        BankLoad("KLClassic", 1);
        libAE8FC9D3_gv_KL_SharedBankP1 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP1, c_bankOptionSignature, true);
    }

    if ((lp_Player == 2)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 2);
        libAE8FC9D3_gv_KL_SharedBankP2 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP2, c_bankOptionSignature, true);
    }

    if ((lp_Player == 3)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 3);
        libAE8FC9D3_gv_KL_SharedBankP3 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP3, c_bankOptionSignature, true);
    }

    if ((lp_Player == 4)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 4);
        libAE8FC9D3_gv_KL_SharedBankP4 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP4, c_bankOptionSignature, true);
    }

    if ((lp_Player == 5)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 5);
        libAE8FC9D3_gv_KL_SharedBankP5 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP5, c_bankOptionSignature, true);
    }

    if ((lp_Player == 6)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 6);
        libAE8FC9D3_gv_KL_SharedBankP6 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP6, c_bankOptionSignature, true);
    }

    if ((lp_Player == 7)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 7);
        libAE8FC9D3_gv_KL_SharedBankP7 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP7, c_bankOptionSignature, true);
    }

    if ((lp_Player == 8)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 8);
        libAE8FC9D3_gv_KL_SharedBankP8 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP8, c_bankOptionSignature, true);
    }

    if ((lp_Player == 9)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 9);
        libAE8FC9D3_gv_KL_SharedBankP9 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP9, c_bankOptionSignature, true);
    }

    if ((lp_Player == 10)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 10);
        libAE8FC9D3_gv_KL_SharedBankP10 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP10, c_bankOptionSignature, true);
    }

    if ((lp_Player == 11)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 11);
        libAE8FC9D3_gv_KL_SharedBankP11 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP11, c_bankOptionSignature, true);
    }

    if ((lp_Player == 12)) {
        BankLoad(libAE8FC9D3_gv_kL_AchievementSectionConstant, 12);
        libAE8FC9D3_gv_KL_SharedBankP12 = BankLastCreated();
        BankOptionSet(libAE8FC9D3_gv_KL_SharedBankP12, c_bankOptionSignature, true);
    }

    BankWait(BankLastCreated());
    BankSave(libAE8FC9D3_gf_ReturnPlayerBank(lp_Player));
    auto79C994B7_ae = UserDataInstanceCount("Achievements");
    lv_index = 1;
    for ( ; ( (auto79C994B7_ai >= 0 && lv_index <= auto79C994B7_ae) || (auto79C994B7_ai < 0 && lv_index >= auto79C994B7_ae) ) ; lv_index += auto79C994B7_ai ) {
        if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_Player, UserDataInstance("Achievements", lv_index)) == true)) {
            UserDataSetString("Achievements", UserDataInstance("Achievements", lv_index), "AwardState", 1, "Awarded");
        }
        else {
            UserDataSetString("Achievements", UserDataInstance("Achievements", lv_index), "AwardState", 1, "Not Awarded");
        }
    }
}

void libAE8FC9D3_gf_KL_BankSave (int lp_player, bool lp_update) {
    // Variable Declarations
    bank lv_localBank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localBank = libAE8FC9D3_gf_ReturnPlayerBank(lp_player);
    if ((BankVerify(lv_localBank) != true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_AE8FC9D3_E57BA842"));
        return ;
    }

    BankSave(lv_localBank);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_AE8FC9D3_B433625A"));
    if ((lp_update == true)) {
        libAE8FC9D3_gf_KL_UpdateUserProfile(1);
    }

}

void libAE8FC9D3_gf_KL_ToggleProfileDisplay (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_UpdateUserProfile(lp_player);
    UIMessageLogPanelSetVisible(PlayerGroupSingle(EventPlayer()), lp_showHide);
}

string libAE8FC9D3_gf_KL_ReturnListID (int lp_list) {
    // Automatic Variable Declarations
    int auto7B21EC0F_val;

    // Implementation
    auto7B21EC0F_val = lp_list;
    if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_Roles) {
        return "RolesAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesHuman) {
        return "HumanAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesAndroid) {
        return "AndroidAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesAlien) {
        return "AlienAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesPsion) {
        return "PsionAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_Jobs) {
        return "JobsAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsEngineer) {
        return "EngineerAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsDoctor) {
        return "DoctorAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsMiner) {
        return "MinerAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsCaptain) {
        return "CaptainAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsSecurityGuard) {
        return "GuardAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsOfficer) {
        return "OfficerAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsMajor) {
        return "MajorAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsSergeant) {
        return "SergeantAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsLieutenant) {
        return "LieutenantAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_Items) {
        return "ItemsAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_Veterancy) {
        return "VeterancyAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_Locations) {
        return "LocationsAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_FeatsOfStrength) {
        return "FeatsAchievementsListBox";
    }
    else if (auto7B21EC0F_val == libAE8FC9D3_ge_KL_AchievementCategories_Patreons) {
        return "PatreonAchievementsListBox";
    }
    else {
        return "PatreonAchievementsListBox";
    }
}

string libAE8FC9D3_gf_KL_ReturnListbyID (string lp_listID) {
    // Automatic Variable Declarations
    string auto75B6C81D_val;

    // Implementation
    auto75B6C81D_val = lp_listID;
    if (auto75B6C81D_val == "ZPTT") {
        return "Patreons";
    }
    else {
        return "Patreons";
    }
}

int libAE8FC9D3_gf_KL_ReturnListIndex (int lp_list) {
    // Automatic Variable Declarations
    int autoBCF4265A_val;

    // Implementation
    autoBCF4265A_val = lp_list;
    if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_Roles) {
        return 1;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesHuman) {
        return 2;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesAndroid) {
        return 3;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesAlien) {
        return 4;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_RolesPsion) {
        return 5;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_Jobs) {
        return 6;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsEngineer) {
        return 7;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsDoctor) {
        return 8;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsMiner) {
        return 9;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsCaptain) {
        return 10;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsSecurityGuard) {
        return 11;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsOfficer) {
        return 12;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsMajor) {
        return 13;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsSergeant) {
        return 14;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_JobsLieutenant) {
        return 15;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_Items) {
        return 16;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_Veterancy) {
        return 17;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_Locations) {
        return 18;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_FeatsOfStrength) {
        return 19;
    }
    else if (autoBCF4265A_val == libAE8FC9D3_ge_KL_AchievementCategories_Patreons) {
        return 20;
    }
    else {
        return 0;
    }
}

bool libAE8FC9D3_gf_KL_ReturnRecentAchievement (int lp_player, int lp_slot, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankValueGetAsFlag(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "State")) == true)) {
        return true;
    }
    else {
        return false;
    }
}

string libAE8FC9D3_gf_KL_ReturnAchievementFromID (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_index;
    string lv_iD;
    string lv_instance;

    // Automatic Variable Declarations
    int auto212BB87B_ae;
    const int auto212BB87B_ai = 1;

    // Variable Initialization
    lv_iD = "";

    // Implementation
    lv_iD = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lp_slot)));
    auto212BB87B_ae = UserDataInstanceCount("Achievements");
    lv_index = 1;
    for ( ; ( (auto212BB87B_ai >= 0 && lv_index <= auto212BB87B_ae) || (auto212BB87B_ai < 0 && lv_index >= auto212BB87B_ae) ) ; lv_index += auto212BB87B_ai ) {
        if ((lv_iD != UserDataGetString("Achievements", UserDataInstance("Achievements", lv_index), "ID", 1))) {
        }
        else {
            lv_instance = UserDataInstance("Achievements", lv_index);
            break;
        }
    }
    return lv_instance;
}

int libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Achievements", UserDataInstance("Achievements", lp_index), "Category", 1);
}

string libAE8FC9D3_gf_KL_ReturnDummyFramePath (int lp_type) {
    // Automatic Variable Declarations
    int auto0E598729_val;

    // Implementation
    auto0E598729_val = lp_type;
    if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Icon) {
        return "DummyInfoFrame/AchievementIcon";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Description) {
        return "DummyInfoFrame/AchievementDescription";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Title) {
        return "DummyInfoFrame/AchievementTitle";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Date) {
        return "DummyInfoFrame/CompletionDate";
    }
    else if (auto0E598729_val == libAE8FC9D3_ge_KL_DummyFrameType_Points) {
        return "DummyInfoFrame/AchievementPoints";
    }
    else {
        return "";
    }
}

void libAE8FC9D3_gf_KL_UpdateAchievementItemData (int lp_player, int lp_category) {
    // Variable Declarations
    int lv_userI;
    int lv_categoryI;
    string lv_achievementInstance;
    string lv_dateValue;

    // Automatic Variable Declarations
    const int auto28A27081_ae = libAE8FC9D3_gv_kL_MaxAvailableLists;
    const int auto28A27081_ai = 1;
    int auto6B6FE193_ae;
    const int auto6B6FE193_ai = 1;

    // Variable Initialization
    lv_dateValue = "";

    // Implementation
    lv_userI = 1;
    for ( ; ( (auto28A27081_ai >= 0 && lv_userI <= auto28A27081_ae) || (auto28A27081_ai < 0 && lv_userI >= auto28A27081_ae) ) ; lv_userI += auto28A27081_ai ) {
        libAE8FC9D3_gv_kL_AchievementIndexing[lv_userI] = 0;
    }
    auto6B6FE193_ae = UserDataInstanceCount("Achievements");
    lv_userI = 1;
    for ( ; ( (auto6B6FE193_ai >= 0 && lv_userI <= auto6B6FE193_ae) || (auto6B6FE193_ai < 0 && lv_userI >= auto6B6FE193_ae) ) ; lv_userI += auto6B6FE193_ai ) {
        lv_categoryI = libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI);
        libAE8FC9D3_gv_kL_AchievementIndexing[lv_categoryI] += 1;
        libAE8FC9D3_gf_KL_HoDItemInListbox(lp_player, lv_categoryI, libAE8FC9D3_gv_kL_AchievementIndexing[lv_categoryI]);
        lv_achievementInstance = UserDataInstance("Achievements", lv_userI);
        libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_icon[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], UserDataGetImagePath("Achievements", lv_achievementInstance, "Icon", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_title[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], StringToText(UserDataGetString("Achievements", lv_achievementInstance, "Title", 1)), PlayerGroupSingle(lp_player));
        if ((UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1) != 0)) {
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryI].lv_pointsLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], IntToText(UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1)), PlayerGroupSingle(lp_player));
            DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryI].lv_pointsLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupAll(), true);
        }

        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_description[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], StringToText(UserDataGetString("Achievements", lv_achievementInstance, "Description", 1)), PlayerGroupSingle(lp_player));
        lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_achievementInstance, "ID", 1) + "Date"));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)].lv_completionLabel[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
        if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_achievementInstance) == true)) {
            DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryI].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
        }
        else {
            DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryI].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "EarnedState", "NotEarned");
        }
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryI].lv_achievementItems[libAE8FC9D3_gv_kL_AchievementIndexing[libAE8FC9D3_gf_KL_ReturnCategoryIDofAchievement(lv_userI)]], PlayerGroupSingle(lp_player), "DisplayContentState", "NoContent");
    }
}

void libAE8FC9D3_gf_KL_UpdateUserProfile (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libAE8FC9D3_gf_KL_UpdateRecentAchievements(lp_player);
    libAE8FC9D3_gf_KL_UpdateAchievementItemData(lp_player, libAE8FC9D3_ge_KL_AchievementCategories_NoCategory);
}

void libAE8FC9D3_gf_KL_UpdateRecentAchievements (int lp_player) {
    // Variable Declarations
    int lv_index;
    string lv_achievementInstance;

    // Automatic Variable Declarations
    const int autoAFD48B85_ae = 7;
    const int autoAFD48B85_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (autoAFD48B85_ai >= 0 && lv_index <= autoAFD48B85_ae) || (autoAFD48B85_ai < 0 && lv_index >= autoAFD48B85_ae) ) ; lv_index += autoAFD48B85_ai ) {
        if ((BankKeyExists(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index))) == false)) {
            return ;
        }

        lv_achievementInstance = libAE8FC9D3_gf_KL_ReturnAchievementFromID(lp_player, lv_index);
        DialogControlSetVisible(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemIcon[lv_index], UserDataGetImagePath("Achievements", lv_achievementInstance, "Icon", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemTitle[lv_index], StringToText(UserDataGetString("Achievements", lv_achievementInstance, "Title", 1)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDescription[lv_index], StringToText(UserDataGetString("Achievements", lv_achievementInstance, "Description", 1)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDate[lv_index], StringToText(BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_achievementInstance, "ID", 1) + "Date"))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemPoints[lv_index], IntToText(UserDataGetInt("Achievements", lv_achievementInstance, "Points", 1)), PlayerGroupSingle(lp_player));
    }
}

void libAE8FC9D3_gf_KL_HookupFanfarePanels (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto60DC18DC_ae = 4;
    const int auto60DC18DC_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/AchievementFanfaresContainer");
    libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer = DialogControlLastCreated();
    lv_index = 0;
    for ( ; ( (auto60DC18DC_ai >= 0 && lv_index <= auto60DC18DC_ae) || (auto60DC18DC_ai < 0 && lv_index >= auto60DC18DC_ae) ) ; lv_index += auto60DC18DC_ai ) {
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("CenteredFrame/AchievementFrame" + IntToString(lv_index))));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Title"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_title[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Description"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_description[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("PointsLabel"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_icon[lv_index] = DialogControlLastCreated();
    }
}

void libAE8FC9D3_gf_KL_CreateUserProfilePanel (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_messageLog;

    // Automatic Variable Declarations
    const int auto963741B6_ae = 7;
    const int auto963741B6_ai = 1;

    // Variable Initialization
    lv_messageLog = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/AchievementButton");
    libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_gameMenuButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, StringExternal("Param/Value/lib_AE8FC9D3_5FAEDF31"), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, "/$parent/$parent/MessageLogDialog");
    lv_messageLog = DialogControlLastCreated();
    DialogControlHookup(lv_messageLog, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AchievementsDialog"));
    libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel = DialogControlLastCreated();
    lv_index = 0;
    for ( ; ( (auto963741B6_ai >= 0 && lv_index <= auto963741B6_ae) || (auto963741B6_ai < 0 && lv_index >= auto963741B6_ae) ) ; lv_index += auto963741B6_ai ) {
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/RecentAchievementsListBox/AchievementItem" + IntToString(lv_index))));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Icon)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Title)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemTitle[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Description)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDescription[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Points)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemPoints[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Date)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDate[lv_index] = DialogControlLastCreated();
    }
    libAE8FC9D3_gf_KL_UpdateUserProfile(lp_player);
}

void libAE8FC9D3_gf_KL_HoDItemInListbox (int lp_player, int lp_listBox, int lp_achievementItem) {
    // Automatic Variable Declarations
    // Implementation
    if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem] != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/AchievementListbox" + IntToString(lp_listBox) + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_achievementItem))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Icon))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_icon[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Title))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_title[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Points))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_pointsLabel[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Description))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_description[lp_achievementItem] = DialogControlLastCreated();
    DialogControlHookup(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementFrame/" + libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Date))));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_completionLabel[lp_achievementItem] = DialogControlLastCreated();
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_listBox].lv_achievementItems[lp_achievementItem], PlayerGroupAll(), true);
}

void libAE8FC9D3_gf_KL_HookupProfileSummary (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto9BAF313A_ae = 7;
    const int auto9BAF313A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto9BAF313A_ai >= 0 && lv_index <= auto9BAF313A_ae) || (auto9BAF313A_ai < 0 && lv_index >= auto9BAF313A_ae) ) ; lv_index += auto9BAF313A_ai ) {
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_userProfilePanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("AchievementsFrame/RecentAchievementsListBox/AchievementItem" + IntToString(lv_index))));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Icon)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Title)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemTitle[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Description)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDescription[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Points)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemPoints[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentAchievementItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(libAE8FC9D3_gf_KL_ReturnDummyFramePath(libAE8FC9D3_ge_KL_DummyFrameType_Date)));
        libAE8FC9D3_gv_kL_UserProfile[lp_player].lv_recentItemDate[lv_index] = DialogControlLastCreated();
    }
}

trigger auto_libAE8FC9D3_gf_KL_HookupAchievementLists_Trigger = null;
int auto_libAE8FC9D3_gf_KL_HookupAchievementLists_lp_player;

void libAE8FC9D3_gf_KL_HookupAchievementLists (int lp_player) {
    auto_libAE8FC9D3_gf_KL_HookupAchievementLists_lp_player = lp_player;

    if (auto_libAE8FC9D3_gf_KL_HookupAchievementLists_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_HookupAchievementLists_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_HookupAchievementLists_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_HookupAchievementLists_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_HookupAchievementLists_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_HookupAchievementLists_lp_player;

    // Variable Declarations
    int lv_index1;
    int lv_index2;
    int lv_index3;
    string lv_indexedList;
    const string lv_filterItem1 = "All";
    const string lv_filterItem2 = "Earned";
    const string lv_filterItem3 = "Unearned";

    // Automatic Variable Declarations
    const int auto355545F2_ae = 20;
    const int auto355545F2_ai = 1;
    int auto32885CC8_val;
    const int autoF6005278_ae = 15;
    const int autoF6005278_ai = 1;

    // Variable Initialization
    lv_indexedList = "";

    // Implementation
    lv_index1 = 1;
    for ( ; ( (auto355545F2_ai >= 0 && lv_index1 <= auto355545F2_ae) || (auto355545F2_ai < 0 && lv_index1 >= auto355545F2_ae) ) ; lv_index1 += auto355545F2_ai ) {
        auto32885CC8_val = lv_index1;
        if (auto32885CC8_val == 1) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_Roles);
        }
        else if (auto32885CC8_val == 2) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_RolesHuman);
        }
        else if (auto32885CC8_val == 3) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_RolesAndroid);
        }
        else if (auto32885CC8_val == 4) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_RolesAlien);
        }
        else if (auto32885CC8_val == 5) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_RolesPsion);
        }
        else if (auto32885CC8_val == 6) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_Jobs);
        }
        else if (auto32885CC8_val == 7) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsEngineer);
        }
        else if (auto32885CC8_val == 8) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsDoctor);
        }
        else if (auto32885CC8_val == 9) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsMiner);
        }
        else if (auto32885CC8_val == 10) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsCaptain);
        }
        else if (auto32885CC8_val == 11) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsSecurityGuard);
        }
        else if (auto32885CC8_val == 12) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsOfficer);
        }
        else if (auto32885CC8_val == 13) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsMajor);
        }
        else if (auto32885CC8_val == 14) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsSergeant);
        }
        else if (auto32885CC8_val == 15) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_JobsLieutenant);
        }
        else if (auto32885CC8_val == 16) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_Items);
        }
        else if (auto32885CC8_val == 17) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_Veterancy);
        }
        else if (auto32885CC8_val == 18) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_Locations);
        }
        else if (auto32885CC8_val == 19) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_FeatsOfStrength);
        }
        else if (auto32885CC8_val == 20) {
            lv_indexedList = libAE8FC9D3_gf_KL_ReturnListID(libAE8FC9D3_ge_KL_AchievementCategories_Patreons);
        }
        else {
        }
        lv_index2 = 1;
        for ( ; ( (autoF6005278_ai >= 0 && lv_index2 <= autoF6005278_ae) || (autoF6005278_ai < 0 && lv_index2 >= autoF6005278_ae) ) ; lv_index2 += autoF6005278_ai ) {
            if ((lv_index2 == 1)) {
                DialogControlHookupStandard(c_triggerControlTypePulldown, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/FilterPulldown"));
                libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_listboxFilter = DialogControlLastCreated();
                DialogControlAddItem(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_listboxFilter, PlayerGroupSingle(lp_player), StringToText(lv_filterItem1));
                DialogControlSelectItem(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_listboxFilter, PlayerGroupSingle(lp_player), 1);
                DialogControlHookupStandard(c_triggerControlTypePanel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/CategoryPointsFrame"));
                libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_listboxCategoryPanel = DialogControlLastCreated();
                DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/CategoryPointsFrame/CategoryProgressBar"));
                libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_listboxCategoryProgress = DialogControlLastCreated();
            }

            DialogControlHookupStandard(c_triggerControlTypeButton, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2)));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_achievementItems[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/Title"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_title[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/Description"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_description[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeImage, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/Icon"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_icon[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/PointsLabel"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_pointsLabel[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/CompletionLabel"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_completionLabel[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/RewardCountFrame"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_rewardCount[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/RewardCountFrame/Label"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_rewardCountLabel[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/ExpandFrame/ExpandedRewardCountFrame"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_rewardCountExtended[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/ExpandFrame/ExpandedRewardCountFrame/Label"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_rewardCountExtendedLabel[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypePanel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/ExpandFrame/ProgressContainerFrame"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_progressFrame[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/ExpandFrame/ProgressContainerFrame/ProgressBar"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_progressBar[lv_index2] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lv_indexedList + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lv_index2) + "/AchievementFrame/ExpandFrame/ProgressContainerFrame/NextAchievementLabel"));
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_index1].lv_progressNextAchievement[lv_index2] = DialogControlLastCreated();
        }
    }
    libAE8FC9D3_gf_KL_AchievementMenuData(lp_player);
    return true;
}

trigger auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_Trigger = null;
int auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_player;
int auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index1;
int auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index2;
int auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index3;
string auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_list;

void libAE8FC9D3_gf_KL_HookupSeriesFrames (int lp_player, int lp_index1, int lp_index2, int lp_index3, string lp_list) {
    auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_player = lp_player;
    auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index1 = lp_index1;
    auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index2 = lp_index2;
    auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index3 = lp_index3;
    auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_list = lp_list;

    if (auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_player;
    int lp_index1 = auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index1;
    int lp_index2 = auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index2;
    int lp_index3 = auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_index3;
    string lp_list = auto_libAE8FC9D3_gf_KL_HookupSeriesFrames_lp_list;

    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesFrames[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3) + "/DummyInfoFrame/AchievementIcon"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesDummyIcon[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3) + "/DummyInfoFrame/AchievementTitle"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesDummyTitle[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3) + "/DummyInfoFrame/AchievementDescription"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesDummyDescription[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3) + "/DummyInfoFrame/AchievementPoints"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesDummyPoints[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3) + "/DummyInfoFrame/CompletionDate"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesDummyDate[lp_index2][lp_index3] = DialogControlLastCreated();
    return true;
}

trigger auto_libAE8FC9D3_gf_KL_HookupRewardFrames_Trigger = null;
int auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_player;
int auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index1;
int auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index2;
int auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index3;
string auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_list;

void libAE8FC9D3_gf_KL_HookupRewardFrames (int lp_player, int lp_index1, int lp_index2, int lp_index3, string lp_list) {
    auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_player = lp_player;
    auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index1 = lp_index1;
    auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index2 = lp_index2;
    auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index3 = lp_index3;
    auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_list = lp_list;

    if (auto_libAE8FC9D3_gf_KL_HookupRewardFrames_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_HookupRewardFrames_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_HookupRewardFrames_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_HookupRewardFrames_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_HookupRewardFrames_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_player;
    int lp_index1 = auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index1;
    int lp_index2 = auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index2;
    int lp_index3 = auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_index3;
    string lp_list = auto_libAE8FC9D3_gf_KL_HookupRewardFrames_lp_list;

    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesFrames[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3) + "/Icon"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesDummyIcon[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/SeriesContainerFrame/AchievementSeriesFrame" + IntToString(lp_index3) + "/PointsLabel"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_seriesDummyPoints[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/RewardFrame" + IntToString(lp_index3)));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_rewardFrames[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/RewardFrame" + IntToString(lp_index3) + "/Icon"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_rewardIcons[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/RewardFrame" + IntToString(lp_index3) + "/RewardType"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_rewardTypeLabel[lp_index2][lp_index3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("/$parent/$parent/AchievementsDialog/KatAchievementsFrame/" + lp_list + "/ScrollableFrame/ContainerFrame/AchievementSlot" + IntToString(lp_index2) + "/AchievementFrame/ExpandFrame/RewardFrame" + IntToString(lp_index3) + "/RewardName"));
    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lp_index1].lv_rewardNameLabel[lp_index2][lp_index3] = DialogControlLastCreated();
    return true;
}

void libAE8FC9D3_gf_KL_UpdateAchiProgress (string lp_achievement, int lp_valueIncrease, int lp_player) {
    // Variable Declarations
    int lv_currentValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_achievement == null)) {
        return ;
    }

    lv_currentValue = BankValueGetAsInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"));
    lv_currentValue += lp_valueIncrease;
    lv_maxValue = UserDataGetInt("Achievements", lp_achievement, "Required Count", 1);
    if ((lv_currentValue > lv_maxValue)) {
        return ;
    }

    if ((lv_currentValue > lv_maxValue)) {
        lv_currentValue = lv_maxValue;
        BankValueSetFromInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"), lv_currentValue);
        libAE8FC9D3_gf_KL_BankSave(lp_player, true);
    }
    else {
        BankValueSetFromInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"), lv_currentValue);
        libAE8FC9D3_gf_KL_BankSave(lp_player, true);
    }
    if ((lv_currentValue == lv_maxValue)) {
        libAE8FC9D3_gf_AwardAchievement(lp_achievement, lp_player);
    }

}

void libAE8FC9D3_gf_KL_AwardAchi (string lp_achievement, int lp_player) {
    // Automatic Variable Declarations
    int autoA9B8164C_val;

    // Implementation
    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lp_achievement) == true)) {
        return ;
    }

    libAE8FC9D3_gf_KL_StoreAchievementKey(lp_player, lp_achievement);
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, PlayerGroupSingle(lp_player), "Show");
    libAE8FC9D3_gf_KL_DisplayAchievement(lp_achievement, lp_player);
    UserDataSetString("Achievements", lp_achievement, "AwardState", 1, "Awarded");
    autoA9B8164C_val = lp_player;
    if (autoA9B8164C_val == 1) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP1, true, false);
    }
    else if (autoA9B8164C_val == 2) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP2, true, false);
    }
    else if (autoA9B8164C_val == 3) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP3, true, false);
    }
    else if (autoA9B8164C_val == 4) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP4, true, false);
    }
    else if (autoA9B8164C_val == 5) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP5, true, false);
    }
    else if (autoA9B8164C_val == 6) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP6, true, false);
    }
    else if (autoA9B8164C_val == 7) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP7, true, false);
    }
    else if (autoA9B8164C_val == 8) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP8, true, false);
    }
    else if (autoA9B8164C_val == 9) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP9, true, false);
    }
    else if (autoA9B8164C_val == 10) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP10, true, false);
    }
    else if (autoA9B8164C_val == 11) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP11, true, false);
    }
    else if (autoA9B8164C_val == 12) {
        TriggerExecute(libAE8FC9D3_gt_KL_HideAchievementPanelP12, true, false);
    }
    else {
    }
}

trigger auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger = null;
int auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_player;
string auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_achievement;

void libAE8FC9D3_gf_KL_StoreRecentAchievementID (int lp_player, string lp_achievement) {
    auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_player = lp_player;
    auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_achievement = lp_achievement;

    if (auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_player;
    string lp_achievement = auto_libAE8FC9D3_gf_KL_StoreRecentAchievementID_lp_achievement;

    // Variable Declarations
    int lv_index;
    int lv_lastEmptySlot;
    string lv_tempString;
    int lv_tempIndex;

    // Automatic Variable Declarations
    const int auto505057AD_ae = 7;
    const int auto505057AD_ai = 1;
    const int auto25790598_ae = 0;
    const int auto25790598_ai = -1;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    lv_index = 0;
    for ( ; ( (auto505057AD_ai >= 0 && lv_index <= auto505057AD_ae) || (auto505057AD_ai < 0 && lv_index >= auto505057AD_ae) ) ; lv_index += auto505057AD_ai ) {
        lv_lastEmptySlot = lv_index;
        if ((BankKeyExists(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index))) == false)) {
            break;
        }

    }
    if ((lv_lastEmptySlot == 0)) {
        BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, "Slot 0", UserDataGetString("Achievements", lp_achievement, "ID", 1));
        return true;
    }

    lv_index = 8;
    for ( ; ( (auto25790598_ai >= 0 && lv_index <= auto25790598_ae) || (auto25790598_ai < 0 && lv_index >= auto25790598_ae) ) ; lv_index += auto25790598_ai ) {
        if ((BankKeyExists(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index))) == false)) {
        }
        else {
            lv_tempIndex = (lv_index + 1);
            lv_tempString = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index)));
            BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_tempIndex)), lv_tempString);
        }
    }
    BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, "Slot 0", UserDataGetString("Achievements", lp_achievement, "ID", 1));
    return true;
}

trigger auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger = null;
int auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_player;
string auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_achievement;

void libAE8FC9D3_gf_KL_StoreAchievementKey (int lp_player, string lp_achievement) {
    auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_player = lp_player;
    auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_achievement = lp_achievement;

    if (auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_StoreAchievementKey_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_StoreAchievementKey_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_StoreAchievementKey_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_player;
    string lp_achievement = auto_libAE8FC9D3_gf_KL_StoreAchievementKey_lp_achievement;

    // Variable Declarations
    string lv_dateDay;
    string lv_dateMonth;
    string lv_dateYear;
    int lv_tempDate;
    string lv_convertedDate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dateDay = "";
    lv_dateMonth = "";
    lv_dateYear = "";
    lv_convertedDate = "";

    // Implementation
    if ((lp_achievement == null)) {
        return true;
    }

    BankValueSetFromFlag(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "State"), true);
    lv_tempDate = GetDateTimeDay(CurrentDateTimeGet());
    if ((lv_tempDate <= 9)) {
        lv_dateDay = ("0" + IntToString(lv_tempDate));
    }
    else {
        lv_dateDay = (IntToString(lv_tempDate));
    }
    lv_tempDate = GetDateTimeMonth(CurrentDateTimeGet());
    if ((lv_tempDate <= 9)) {
        lv_dateMonth = ("0" + IntToString(lv_tempDate));
    }
    else {
        lv_dateMonth = (IntToString(lv_tempDate));
    }
    lv_dateYear = IntToString(GetDateTimeYear(CurrentDateTimeGet()));
    lv_convertedDate = (lv_dateDay + "/" + lv_dateMonth + "/" + lv_dateYear);
    BankValueSetFromString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Date"), lv_convertedDate);
    libAE8FC9D3_gf_KL_StoreRecentAchievementID(lp_player, lp_achievement);
    return true;
}

trigger auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger = null;
string auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_achievement;
int auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_player;

void libAE8FC9D3_gf_KL_DisplayAchievement (string lp_achievement, int lp_player) {
    auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_achievement = lp_achievement;
    auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_player = lp_player;

    if (auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_DisplayAchievement_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_DisplayAchievement_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_DisplayAchievement_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_achievement;
    int lp_player = auto_libAE8FC9D3_gf_KL_DisplayAchievement_lp_player;

    // Variable Declarations
    int lv_index;
    int lv_maxAchievements;
    int lv_minAchievements;
    const fixed lv_animationTotal = 3.5;
    const fixed lv_animationDelay = 0.5;
    int lv_inactiveIndex;

    // Automatic Variable Declarations
    bool auto246BDD06_val;
    const int auto354DEA22_ae = 0;
    const int auto354DEA22_ai = -1;
    string auto83E8DCE2_val;

    // Variable Initialization
    lv_maxAchievements = 4;

    // Implementation
    auto246BDD06_val = UIFrameVisible(lp_player, c_syncFrameTypeConsolePanel);
    if (auto246BDD06_val == true) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, PlayerGroupSingle(lp_player), "MenuPresence", "InGame");
        lv_maxAchievements = 3;
    }
    else if (auto246BDD06_val == false) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_fanfareContainer, PlayerGroupSingle(lp_player), "MenuPresence", "InMenu");
        lv_maxAchievements = 4;
    }
    else {
    }
    while (true) {
        lv_index = lv_maxAchievements;
        for ( ; ( (auto354DEA22_ai >= 0 && lv_index <= auto354DEA22_ae) || (auto354DEA22_ai < 0 && lv_index >= auto354DEA22_ae) ) ; lv_index += auto354DEA22_ai ) {
            if ((libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_index] == false)) {
                lv_inactiveIndex = lv_index;
                break;
            }

        }
        if ((libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_inactiveIndex] == false)) {
            break;
        }

        Wait(lv_animationDelay, c_timeReal);
    }
    libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_inactiveIndex] = true;
    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_icon[lv_inactiveIndex], UserDataGetImagePath("Achievements", lp_achievement, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_title[lv_inactiveIndex], StringToText(UserDataGetString("Achievements", lp_achievement, "Title", 1)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_description[lv_inactiveIndex], StringToText(UserDataGetString("Achievements", lp_achievement, "Description", 1)), PlayerGroupSingle(lp_player));
    if ((UserDataGetInt("Achievements", lp_achievement, "Points", 1) <= 0)) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lp_player], PlayerGroupSingle(lp_player), "PointsGroup", "NoPoints");
    }
    else {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lp_player], PlayerGroupSingle(lp_player), "PointsGroup", "HasPoints");
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_pointsLabel[lv_inactiveIndex], IntToText(UserDataGetInt("Achievements", lp_achievement, "Points", 1)), PlayerGroupSingle(lp_player));
    }
    auto83E8DCE2_val = UserDataGetGameLink("Achievements", lp_achievement, "Race", 1);
    if (auto83E8DCE2_val == "Terr") {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), "StyleStateGroup", "TerranState");
    }
    else if (auto83E8DCE2_val == "Zerg") {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), "StyleStateGroup", "ZergState");
    }
    else if (auto83E8DCE2_val == "Prot") {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), "StyleStateGroup", "ProtossState");
    }
    else {
    }
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), true);
    Wait((lv_animationTotal + (lv_animationDelay * lv_inactiveIndex)), c_timeReal);
    DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lp_player].lv_achievementFrames[lv_inactiveIndex], PlayerGroupSingle(lp_player), false);
    libAE8FC9D3_gv_kL_ActiveAchievement[lp_player][lv_inactiveIndex] = false;
    return true;
}

int libAE8FC9D3_gf_KL_ReturnAchievementProgress (int lp_player, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    return BankValueGetAsInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"));
}

bool libAE8FC9D3_gf_KL_PlayerAchievementState (int lp_player, string lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankValueGetAsFlag(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "State")) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bank libAE8FC9D3_gf_KL_ReturnPlayerBank (int lp_player) {
    // Variable Declarations
    bool lv_achievementState;

    // Automatic Variable Declarations
    int auto3584967D_val;

    // Variable Initialization

    // Implementation
    auto3584967D_val = lp_player;
    if (auto3584967D_val == 1) {
        return libAE8FC9D3_gv_KL_SharedBankP1;
    }
    else if (auto3584967D_val == 2) {
        return libAE8FC9D3_gv_KL_SharedBankP2;
    }
    else if (auto3584967D_val == 3) {
        return libAE8FC9D3_gv_KL_SharedBankP3;
    }
    else if (auto3584967D_val == 4) {
        return libAE8FC9D3_gv_KL_SharedBankP4;
    }
    else if (auto3584967D_val == 5) {
        return libAE8FC9D3_gv_KL_SharedBankP5;
    }
    else if (auto3584967D_val == 6) {
        return libAE8FC9D3_gv_KL_SharedBankP6;
    }
    else if (auto3584967D_val == 7) {
        return libAE8FC9D3_gv_KL_SharedBankP7;
    }
    else if (auto3584967D_val == 8) {
        return libAE8FC9D3_gv_KL_SharedBankP8;
    }
    else if (auto3584967D_val == 9) {
        return libAE8FC9D3_gv_KL_SharedBankP9;
    }
    else if (auto3584967D_val == 10) {
        return libAE8FC9D3_gv_KL_SharedBankP10;
    }
    else if (auto3584967D_val == 11) {
        return libAE8FC9D3_gv_KL_SharedBankP11;
    }
    else if (auto3584967D_val == 12) {
        return libAE8FC9D3_gv_KL_SharedBankP12;
    }
    else {
        return null;
    }
}

void libAE8FC9D3_gf_InitializeAchievementsOld () {
    // Variable Declarations
    int lv_activePlayers;
    int lv_index;

    // Automatic Variable Declarations
    playergroup autoCBA2C50B_g;
    int autoCBA2C50B_var;
    const int auto11DB1E55_ae = 7;
    const int auto11DB1E55_ai = 1;

    // Variable Initialization

    // Deprecated
    autoCBA2C50B_g = PlayerGroupActive();
    autoCBA2C50B_var = -1;
    while (true) {
        autoCBA2C50B_var = PlayerGroupNextPlayer(autoCBA2C50B_g, autoCBA2C50B_var);
        if (autoCBA2C50B_var < 0) { break; }
        lv_activePlayers += 1;
        libAE8FC9D3_gf_KL_HookupFanfarePanels(lv_activePlayers);
        libAE8FC9D3_gf_KL_BankLoad(lv_activePlayers);
        libAE8FC9D3_gf_KL_HookupProfileSummary(lv_activePlayers);
        lv_index = 0;
        for ( ; ( (auto11DB1E55_ai >= 0 && lv_index <= auto11DB1E55_ae) || (auto11DB1E55_ai < 0 && lv_index >= auto11DB1E55_ae) ) ; lv_index += auto11DB1E55_ai ) {
            libAE8FC9D3_gf_KL_UpdateRecentAchievements(lv_activePlayers);
        }
        libAE8FC9D3_gf_KL_HookupAchievementLists(lv_activePlayers);
    }
}

trigger auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_Trigger = null;
int auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_lp_player;
string auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_lp_achievement;

void libAE8FC9D3_gf_KL_UpdateSummaryPanels (int lp_player, string lp_achievement) {
    auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_lp_player = lp_player;
    auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_lp_achievement = lp_achievement;

    if (auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_Trigger == null) {
        auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_Trigger = TriggerCreate("auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_TriggerFunc");
    }

    TriggerExecute(auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_Trigger, false, false);
}

bool auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_lp_player;
    string lp_achievement = auto_libAE8FC9D3_gf_KL_UpdateSummaryPanels_lp_achievement;

    // Variable Declarations
    int lv_index;
    int lv_lastEmptySlot;
    string lv_currentListID;

    // Automatic Variable Declarations
    const int autoF0D9A2F2_ae = 7;
    const int autoF0D9A2F2_ai = 1;

    // Variable Initialization
    lv_currentListID = "";

    // Implementation
    lv_index = 0;
    for ( ; ( (autoF0D9A2F2_ai >= 0 && lv_index <= autoF0D9A2F2_ae) || (autoF0D9A2F2_ai < 0 && lv_index >= autoF0D9A2F2_ae) ) ; lv_index += autoF0D9A2F2_ai ) {
        lv_currentListID = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot" + IntToString(lv_index)));
        if ((BankKeyExists(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, ("Slot " + IntToString(lv_index))) == false)) {
            break;
        }

    }
    return true;
}

void libAE8FC9D3_gf_KL_SetAchievementPanelData (int lp_player, string lp_achievement, int lp_category, bool lp_displayLastEarned) {
    // Variable Declarations
    string lv_dateValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dateValue = "";

    // Implementation
    if ((lp_achievement == null)) {
        return ;
    }

    libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)] += 1;
    libAE8FC9D3_gv_kL_ActiveInstances[(lp_category)][libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]] = lp_achievement;
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_title[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], StringToText(UserDataGetString("Achievements", lp_achievement, "Title", 1)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_description[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], StringToText(UserDataGetString("Achievements", lp_achievement, "Description", 1)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_icon[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], UserDataGetImagePath("Achievements", lp_achievement, "Icon", 1), PlayerGroupSingle(lp_player));
    lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Date"));
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_completionLabel[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_completionLabel[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lp_achievement) == true)) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
        DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], PlayerGroupSingle(lp_player), true);
        libAE8FC9D3_gv_achievements += 1;
    }
    else {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], PlayerGroupSingle(lp_player), "EarnedState", "NotEarned");
    }
    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], PlayerGroupSingle(lp_player), "DisplayContentState", "NoContent");
    libAE8FC9D3_gf_KL_CheckAchievementProgress(lp_player, lp_achievement, lp_category, libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]);
    libAE8FC9D3_gf_KL_CheckAchievementRewards(lp_player, lp_achievement, lp_category, libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]);
    libAE8FC9D3_gf_KL_CheckAchievementSeries(lp_player, lp_achievement, lp_category, libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)], lp_displayLastEarned);
    if ((UserDataGetInt("Achievements", lp_achievement, "Points", 1) != 0)) {
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_pointsLabel[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], IntToText(UserDataGetInt("Achievements", lp_achievement, "Points", 1)), PlayerGroupSingle(lp_player));
        libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryProgressMax += UserDataGetInt("Achievements", lp_achievement, "Points", 1);
        if ((libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryProgressMax == 0)) {
            DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryPanel, PlayerGroupSingle(lp_player), false);
        }
        else {
            DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryPanel, PlayerGroupSingle(lp_player), true);
        }
        if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lp_achievement) == true)) {
            libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryProgressCurrent += UserDataGetInt("Achievements", lp_achievement, "Points", 1);
        }

        libNtve_gf_SetDialogItemMaximumValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryProgress, IntToFixed(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryProgressMax), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryProgress, IntToFixed(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryProgressCurrent), PlayerGroupSingle(lp_player));
    }
    else {
        DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_listboxCategoryPanel, PlayerGroupSingle(lp_player), false);
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[libAE8FC9D3_gv_kL_MaxActiveInstances[(lp_category)]], PlayerGroupSingle(lp_player), "VisibilityState", "Visible");
    }
}

void libAE8FC9D3_gf_KL_CheckAchievementSeries (int lp_player, string lp_achievement, int lp_category, int lp_slot, bool lp_displayLastEarned) {
    // Variable Declarations
    int lv_index;
    int lv_slotConversion;
    string lv_lastAchievement;
    string lv_nextAchievement;
    string lv_dateValue;

    // Automatic Variable Declarations
    const int autoFE7C5183_ae = 0;
    const int autoFE7C5183_ai = -1;
    bool auto459EBD20_val;

    // Variable Initialization
    lv_dateValue = "";

    // Implementation
    lv_index = 19;
    for ( ; ( (autoFE7C5183_ai >= 0 && lv_index <= autoFE7C5183_ae) || (autoFE7C5183_ai < 0 && lv_index >= autoFE7C5183_ae) ) ; lv_index += autoFE7C5183_ai ) {
        lv_slotConversion += 1;
        lv_lastAchievement = lv_nextAchievement;
        lv_nextAchievement = UserDataGetUserInstance("Achievements", lp_achievement, "Achievement Series", lv_slotConversion);
        if ((lv_nextAchievement == null)) {
            return ;
        }
        else {
            if ((lv_slotConversion == 1)) {
            }
            else {
                libAE8FC9D3_gv_achievements += 1;
            }
            libAE8FC9D3_gf_KL_HookupSeriesFrames(lp_player, libAE8FC9D3_gf_KL_ReturnListIndex(lp_category), lp_slot, lv_index, libAE8FC9D3_gf_KL_ReturnListID(lp_category));
            libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesDummyIcon[lp_slot][lv_index], UserDataGetImagePath("Achievements", lv_nextAchievement, "Icon", 1), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesDummyTitle[lp_slot][lv_index], StringToText(UserDataGetString("Achievements", lv_nextAchievement, "Title", 1)), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesDummyDescription[lp_slot][lv_index], StringToText(UserDataGetString("Achievements", lv_nextAchievement, "Description", 1)), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesDummyPoints[lp_slot][lv_index], IntToText(UserDataGetInt("Achievements", lv_nextAchievement, "Points", 1)), PlayerGroupSingle(lp_player));
            lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_nextAchievement, "ID", 1) + "Date"));
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesDummyDate[lp_slot][lv_index], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
            DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "DisplayContentState", "HasContent");
            if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_lastAchievement) == false) && (libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_nextAchievement) == false)) {
                TextExpressionSetToken("Param/Expression/lib_AE8FC9D3_A7E39E49", "A", StringToText(UserDataGetString("Achievements", lv_nextAchievement, "Title", 1)));
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_progressNextAchievement[lp_slot], TextExpressionAssemble("Param/Expression/lib_AE8FC9D3_A7E39E49"), PlayerGroupSingle(lp_player));
                DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_progressNextAchievement[lp_slot], PlayerGroupSingle(lp_player), true);
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_progressBar[lp_slot], PlayerGroupSingle(lp_player), "ProgressState", "Series");
            }

            if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_nextAchievement) == true)) {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesFrames[lp_slot][lv_index], PlayerGroupSingle(lp_player), "SeriesEntryState", "Earned");
            }
            else {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesFrames[lp_slot][lv_index], PlayerGroupSingle(lp_player), "SeriesEntryState", "Unearned");
            }
            if ((UserDataGetInt("Achievements", lv_nextAchievement, "Points", 1) == 0)) {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesFrames[lp_slot][lv_index], PlayerGroupSingle(lp_player), "PointsState", "NoPoints");
            }

            if ((UserDataGetUserInstance("Achievements", lv_lastAchievement, "RewardCache", 1) == null)) {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_seriesFrames[lp_slot][lv_index], PlayerGroupSingle(lp_player), "RewardState", "NoReward");
            }

            auto459EBD20_val = lp_displayLastEarned;
            if (auto459EBD20_val == false) {
                if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_lastAchievement) == true)) {
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
                }
                else {
                    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "EarnedState", "Unearned");
                }
                libAE8FC9D3_gv_kL_ActiveInstances[lp_slot][0] = lv_lastAchievement;
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_title[lp_slot], StringToText(UserDataGetString("Achievements", lv_lastAchievement, "Title", 1)), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_description[lp_slot], StringToText(UserDataGetString("Achievements", lv_lastAchievement, "Description", 1)), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_icon[lp_slot], UserDataGetImagePath("Achievements", lv_lastAchievement, "Icon", 1), PlayerGroupSingle(lp_player));
                lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_lastAchievement, "ID", 1) + "Date"));
                libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_completionLabel[lp_slot], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
                libAE8FC9D3_gf_KL_CheckAchievementRewards(lp_player, lv_lastAchievement, lp_category, lp_slot);
            }
            else if (auto459EBD20_val == true) {
                if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_lastAchievement) == true) && (libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_nextAchievement) == true)) {
                    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_nextAchievement) == true)) {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
                    }
                    else {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "EarnedState", "Unearned");
                    }
                    libAE8FC9D3_gv_kL_ActiveInstances[lp_slot][0] = lv_nextAchievement;
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_title[lp_slot], StringToText(UserDataGetString("Achievements", lv_nextAchievement, "Title", 1)), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_description[lp_slot], StringToText(UserDataGetString("Achievements", lv_nextAchievement, "Description", 1)), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_icon[lp_slot], UserDataGetImagePath("Achievements", lv_nextAchievement, "Icon", 1), PlayerGroupSingle(lp_player));
                    lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_nextAchievement, "ID", 1) + "Date"));
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_completionLabel[lp_slot], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
                    libAE8FC9D3_gf_KL_CheckAchievementRewards(lp_player, lv_nextAchievement, lp_category, lp_slot);
                }

                if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_lastAchievement) == true) && (libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_nextAchievement) == false)) {
                    if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lv_lastAchievement) == true)) {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
                    }
                    else {
                        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "EarnedState", "Unearned");
                    }
                    libAE8FC9D3_gv_kL_ActiveInstances[lp_slot][0] = lv_lastAchievement;
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_title[lp_slot], StringToText(UserDataGetString("Achievements", lv_lastAchievement, "Title", 1)), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_description[lp_slot], StringToText(UserDataGetString("Achievements", lv_lastAchievement, "Description", 1)), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_icon[lp_slot], UserDataGetImagePath("Achievements", lv_lastAchievement, "Icon", 1), PlayerGroupSingle(lp_player));
                    lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lv_lastAchievement, "ID", 1) + "Date"));
                    libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_completionLabel[lp_slot], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
                    libAE8FC9D3_gf_KL_CheckAchievementRewards(lp_player, lv_lastAchievement, lp_category, lp_slot);
                }

            }
            else {
            }
        }
    }
}

void libAE8FC9D3_gf_KL_CheckAchievementRewards (int lp_player, string lp_achievement, int lp_category, int lp_slot) {
    // Variable Declarations
    int lv_index;
    int lv_slotConversion;
    string lv_nextReward;
    int lv_rewardCount;

    // Automatic Variable Declarations
    const int auto0D812E36_ae = 19;
    const int auto0D812E36_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto0D812E36_ai >= 0 && lv_index <= auto0D812E36_ae) || (auto0D812E36_ai < 0 && lv_index >= auto0D812E36_ae) ) ; lv_index += auto0D812E36_ai ) {
        lv_slotConversion += 1;
        lv_nextReward = UserDataGetUserInstance("Achievements", lp_achievement, "RewardCache", 1);
        if ((UserDataGetImagePath("Rewards", lv_nextReward, "Reward Icon", lv_slotConversion) != null)) {
        }
        else {
            if ((lv_index == 0)) {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardCount[lp_slot], PlayerGroupSingle(lp_player), "VsibilityState", "NoReward");
            }

            return ;
        }
        lv_rewardCount += 1;
        libAE8FC9D3_gf_KL_HookupRewardFrames(lp_player, libAE8FC9D3_gf_KL_ReturnListIndex(lp_category), lp_slot, lv_index, libAE8FC9D3_gf_KL_ReturnListID(lp_category));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardCountLabel[lp_slot], IntToText(lv_rewardCount), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardCountExtendedLabel[lp_slot], IntToText(lv_rewardCount), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardIcons[lp_slot][lv_index], UserDataGetImagePath("Rewards", lv_nextReward, "Reward Icon", lv_slotConversion), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardTypeLabel[lp_slot][lv_index], StringToText(UserDataGetString("Rewards", lv_nextReward, "Reward Type", lv_slotConversion)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardNameLabel[lp_slot][lv_index], StringToText(UserDataGetString("Rewards", lv_nextReward, "Reward Name", lv_slotConversion)), PlayerGroupSingle(lp_player));
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "DisplayContentState", "HasContent");
        if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, lp_achievement) == true)) {
            DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardFrames[lp_slot][lv_index], PlayerGroupSingle(lp_player), "RewardState", "Earned");
        }
        else {
            DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_rewardFrames[lp_slot][lv_index], PlayerGroupSingle(lp_player), "RewardState", "Unearned");
        }
    }
}

void libAE8FC9D3_gf_KL_CheckAchievementProgress (int lp_player, string lp_achievement, int lp_category, int lp_slot) {
    // Variable Declarations
    int lv_index;
    int lv_slotConversion;
    string lv_lastAchievement;
    string lv_nextAchievement;
    int lv_progressCurrent;
    int lv_progressRequired;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UserDataGetInt("Achievements", lp_achievement, "Required Count", 1) > 0)) {
        DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_progressFrame[lp_slot], PlayerGroupSingle(lp_player), true);
    }
    else {
        return ;
    }
    DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_achievementItems[lp_slot], PlayerGroupSingle(lp_player), "DisplayContentState", "HasContent");
    lv_progressCurrent = BankValueGetAsInt(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", lp_achievement, "ID", 1) + "Progress"));
    lv_progressRequired = UserDataGetInt("Achievements", lp_achievement, "Required Count", 1);
    libNtve_gf_SetDialogItemMaximumValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_progressBar[lp_slot], IntToFixed(lv_progressRequired), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_progressBar[lp_slot], IntToFixed(lv_progressCurrent), PlayerGroupSingle(lp_player));
    if ((lv_progressCurrent == lv_progressRequired)) {
        DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lp_category)].lv_progressBar[lp_slot], PlayerGroupSingle(lp_player), "ProgressState", "Complete");
    }

}

void libAE8FC9D3_gf_KL_UpdateAchievementPanelData (int lp_player) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_instanceIndex;
    string lv_dateValue;
    int lv_category;

    // Automatic Variable Declarations
    const int auto6B7306B4_ae = 6;
    const int auto6B7306B4_ai = 1;
    int autoF33C03FF_val;
    int autoFABDBD4B_ae;
    const int autoFABDBD4B_ai = 1;

    // Variable Initialization
    lv_dateValue = "";
    lv_category = libAE8FC9D3_ge_KL_AchievementCategories_NoCategory;

    // Implementation
    lv_categoryIndex = 1;
    for ( ; ( (auto6B7306B4_ai >= 0 && lv_categoryIndex <= auto6B7306B4_ae) || (auto6B7306B4_ai < 0 && lv_categoryIndex >= auto6B7306B4_ae) ) ; lv_categoryIndex += auto6B7306B4_ai ) {
        libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgressCurrent = 0;
        libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgressMax = 0;
        autoF33C03FF_val = lv_categoryIndex;
        if (autoF33C03FF_val == 1) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_Roles;
        }
        else if (autoF33C03FF_val == 2) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_RolesHuman;
        }
        else if (autoF33C03FF_val == 3) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_RolesAndroid;
        }
        else if (autoF33C03FF_val == 4) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_RolesAlien;
        }
        else if (autoF33C03FF_val == 5) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_RolesPsion;
        }
        else if (autoF33C03FF_val == 6) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_Jobs;
        }
        else if (autoF33C03FF_val == 7) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsEngineer;
        }
        else if (autoF33C03FF_val == 8) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsDoctor;
        }
        else if (autoF33C03FF_val == 9) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsMiner;
        }
        else if (autoF33C03FF_val == 10) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsCaptain;
        }
        else if (autoF33C03FF_val == 11) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsSecurityGuard;
        }
        else if (autoF33C03FF_val == 12) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsOfficer;
        }
        else if (autoF33C03FF_val == 13) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsMajor;
        }
        else if (autoF33C03FF_val == 14) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsSergeant;
        }
        else if (autoF33C03FF_val == 15) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_JobsLieutenant;
        }
        else if (autoF33C03FF_val == 16) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_Items;
        }
        else if (autoF33C03FF_val == 17) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_Veterancy;
        }
        else if (autoF33C03FF_val == 18) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_Locations;
        }
        else if (autoF33C03FF_val == 19) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_FeatsOfStrength;
        }
        else if (autoF33C03FF_val == 20) {
            lv_category = libAE8FC9D3_ge_KL_AchievementCategories_Patreons;
        }
        else {
        }
        autoFABDBD4B_ae = libAE8FC9D3_gv_kL_MaxActiveInstances[lv_categoryIndex];
        lv_instanceIndex = 1;
        for ( ; ( (autoFABDBD4B_ai >= 0 && lv_instanceIndex <= autoFABDBD4B_ae) || (autoFABDBD4B_ai < 0 && lv_instanceIndex >= autoFABDBD4B_ae) ) ; lv_instanceIndex += autoFABDBD4B_ai ) {
            lv_dateValue = BankValueGetAsString(libAE8FC9D3_gf_ReturnPlayerBank(lp_player), libAE8FC9D3_gv_kL_AchievementSectionConstant, (UserDataGetString("Achievements", libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], "ID", 1) + "Date"));
            libNtve_gf_SetDialogItemText(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryIndex].lv_completionLabel[lv_instanceIndex], StringToText(lv_dateValue), PlayerGroupSingle(lp_player));
            if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex]) == true)) {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryIndex].lv_achievementItems[lv_instanceIndex], PlayerGroupSingle(lp_player), "EarnedState", "Earned");
                DialogControlSetVisible(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][lv_categoryIndex].lv_achievementItems[lv_instanceIndex], PlayerGroupSingle(lp_player), true);
            }

            if ((true)) {
                libAE8FC9D3_gf_KL_CheckAchievementSeries(lp_player, libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], lv_category, libAE8FC9D3_gv_kL_MaxActiveInstances[lv_categoryIndex], true);
            }
            else {
                libAE8FC9D3_gf_KL_CheckAchievementSeries(lp_player, libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], lv_category, libAE8FC9D3_gv_kL_MaxActiveInstances[lv_categoryIndex], false);
            }
            libAE8FC9D3_gf_KL_CheckAchievementRewards(lp_player, libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], lv_category, libAE8FC9D3_gv_kL_MaxActiveInstances[lv_categoryIndex]);
            libAE8FC9D3_gf_KL_CheckAchievementProgress(lp_player, libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], lv_category, libAE8FC9D3_gv_kL_MaxActiveInstances[lv_categoryIndex]);
            if ((UserDataGetInt("Achievements", libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], "Points", 1) != 0)) {
                libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgressMax += UserDataGetInt("Achievements", libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], "Points", 1);
                if ((libAE8FC9D3_gf_PlayerHasAchievement(lp_player, libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex]) == true)) {
                    libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgressCurrent += UserDataGetInt("Achievements", libAE8FC9D3_gv_kL_ActiveInstances[lv_categoryIndex][lv_instanceIndex], "Points", 1);
                }

                libNtve_gf_SetDialogItemMaximumValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgress, IntToFixed(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgressMax), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemCurrentValue(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgress, IntToFixed(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_listboxCategoryProgressCurrent), PlayerGroupSingle(lp_player));
            }
            else {
                DialogControlSetAnimationState(libAE8FC9D3_gv_kL_AchievementListbox[lp_player][(lv_category)].lv_achievementItems[libAE8FC9D3_gv_kL_MaxActiveInstances[lv_categoryIndex]], PlayerGroupSingle(lp_player), "VisibilityState", "Visible");
            }
        }
    }
}

void libAE8FC9D3_gf_KL_AchievementMenuData (int lp_player) {
    // Variable Declarations
    int lv_activePreset;
    string lv_activeCategory;
    int lv_categoryIndex;
    int lv_instanceIndex;

    // Automatic Variable Declarations
    const int auto79CC1994_ae = 20;
    const int auto79CC1994_ai = 1;
    int autoB88A16C3_val;
    const int auto753FF24E_ae = 20;
    const int auto753FF24E_ai = 1;

    // Variable Initialization
    lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_NoCategory;

    // Implementation
    lv_categoryIndex = 1;
    for ( ; ( (auto79CC1994_ai >= 0 && lv_categoryIndex <= auto79CC1994_ae) || (auto79CC1994_ai < 0 && lv_categoryIndex >= auto79CC1994_ae) ) ; lv_categoryIndex += auto79CC1994_ai ) {
        autoB88A16C3_val = lv_categoryIndex;
        if (autoB88A16C3_val == 1) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_Roles;
            lv_activeCategory = "Roles";
        }
        else if (autoB88A16C3_val == 2) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_RolesHuman;
            lv_activeCategory = "Human Sub";
        }
        else if (autoB88A16C3_val == 3) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_RolesAndroid;
            lv_activeCategory = "Android Sub";
        }
        else if (autoB88A16C3_val == 4) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_RolesAlien;
            lv_activeCategory = "Alien Sub";
        }
        else if (autoB88A16C3_val == 5) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_RolesPsion;
            lv_activeCategory = "Psion Sub";
        }
        else if (autoB88A16C3_val == 6) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_Jobs;
            lv_activeCategory = "Jobs";
        }
        else if (autoB88A16C3_val == 7) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsEngineer;
            lv_activeCategory = "Engineer Sub";
        }
        else if (autoB88A16C3_val == 8) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsDoctor;
            lv_activeCategory = "Doctor Sub";
        }
        else if (autoB88A16C3_val == 9) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsMiner;
            lv_activeCategory = "Miner Sub";
        }
        else if (autoB88A16C3_val == 10) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsCaptain;
            lv_activeCategory = "Captain Sub";
        }
        else if (autoB88A16C3_val == 11) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsSecurityGuard;
            lv_activeCategory = "Guard Sub";
        }
        else if (autoB88A16C3_val == 12) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsOfficer;
            lv_activeCategory = "Officer Sub";
        }
        else if (autoB88A16C3_val == 13) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsMajor;
            lv_activeCategory = "Major Sub";
        }
        else if (autoB88A16C3_val == 14) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsSergeant;
            lv_activeCategory = "Sergeant Sub";
        }
        else if (autoB88A16C3_val == 15) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_JobsLieutenant;
            lv_activeCategory = "Lieutenant Sub";
        }
        else if (autoB88A16C3_val == 16) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_Items;
            lv_activeCategory = "Items";
        }
        else if (autoB88A16C3_val == 17) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_Veterancy;
            lv_activeCategory = "Veterancy";
        }
        else if (autoB88A16C3_val == 18) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_Locations;
            lv_activeCategory = "Locations";
        }
        else if (autoB88A16C3_val == 19) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_FeatsOfStrength;
            lv_activeCategory = "Feats";
        }
        else if (autoB88A16C3_val == 20) {
            lv_activePreset = libAE8FC9D3_ge_KL_AchievementCategories_Patreons;
            lv_activeCategory = "Patreons";
        }
        else {
        }
        lv_instanceIndex = 1;
        for ( ; ( (auto753FF24E_ai >= 0 && lv_instanceIndex <= auto753FF24E_ae) || (auto753FF24E_ai < 0 && lv_instanceIndex >= auto753FF24E_ae) ) ; lv_instanceIndex += auto753FF24E_ai ) {
            if ((lv_categoryIndex == 20)) {
                if ((UserDataGetUserInstance("AchievementCategories", lv_activeCategory, "Achievement", lv_instanceIndex) != null)) {
                    libAE8FC9D3_gf_KL_SetAchievementPanelData(lp_player, UserDataGetUserInstance("AchievementCategories", lv_activeCategory, "Achievement", lv_instanceIndex), lv_activePreset, true);
                }
                else {
                    break;
                }
            }
            else {
                if ((UserDataGetUserInstance("AchievementCategories", lv_activeCategory, "Achievement", lv_instanceIndex) != null)) {
                    libAE8FC9D3_gf_KL_SetAchievementPanelData(lp_player, UserDataGetUserInstance("AchievementCategories", lv_activeCategory, "Achievement", lv_instanceIndex), lv_activePreset, true);
                }
                else {
                    break;
                }
            }
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Attempt Initialization
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_AttemptInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAE8FC9D3_gf_InitializeAchievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_AttemptInitialization_Init () {
    libAE8FC9D3_gt_AttemptInitialization = TriggerCreate("libAE8FC9D3_gt_AttemptInitialization_Func");
    TriggerAddEventMapInit(libAE8FC9D3_gt_AttemptInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MenuBarOpenAchievements
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_MenuBarOpenAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libAE8FC9D3_gv_kL_UserProfile[EventPlayer()].lv_gameMenuButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAE8FC9D3_gf_ShowUserProfile(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_MenuBarOpenAchievements_Init () {
    libAE8FC9D3_gt_MenuBarOpenAchievements = TriggerCreate("libAE8FC9D3_gt_MenuBarOpenAchievements_Func");
    TriggerAddEventDialogControl(libAE8FC9D3_gt_MenuBarOpenAchievements, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P1
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 1;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP1_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP1 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P2
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP2_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP2 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P3
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP3_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP3 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P4
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 4;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP4_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP4 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P5
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP5_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP5 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P6
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 6;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP6_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP6 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P7
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 7;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP7_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP7 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP7_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P8
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP8_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP8 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP8_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P9
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 9;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP9_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP9 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP9_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P10
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 10;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP10_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP10 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP10_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P11
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 11;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP11_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP11 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_HideAchievementPanel)P12
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_gt_KL_HideAchievementPanelP12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_player = 12;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][0] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][1] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][2] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][3] == false) && (libAE8FC9D3_gv_kL_ActiveAchievement[lv_player][4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libAE8FC9D3_gv_kL_AchievementFanfarePanel[lv_player].lv_fanfareContainer, PlayerGroupSingle(lv_player), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAE8FC9D3_gt_KL_HideAchievementPanelP12_Init () {
    libAE8FC9D3_gt_KL_HideAchievementPanelP12 = TriggerCreate("libAE8FC9D3_gt_KL_HideAchievementPanelP12_Func");
}

void libAE8FC9D3_InitTriggers () {
    libAE8FC9D3_gt_AttemptInitialization_Init();
    libAE8FC9D3_gt_MenuBarOpenAchievements_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP1_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP2_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP3_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP4_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP5_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP6_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP7_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP8_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP9_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP10_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP11_Init();
    libAE8FC9D3_gt_KL_HideAchievementPanelP12_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAE8FC9D3_InitLib_completed = false;

void libAE8FC9D3_InitLib () {
    if (libAE8FC9D3_InitLib_completed) {
        return;
    }

    libAE8FC9D3_InitLib_completed = true;

    libAE8FC9D3_InitLibraries();
    libAE8FC9D3_InitVariables();
    libAE8FC9D3_InitTriggers();
}

